/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
)

// checks if the LogUsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogUsageResponse{}

// LogUsageResponse struct for LogUsageResponse
type LogUsageResponse struct {
	Usage *LogUsageResponseUsage `json:"usage,omitempty"`
}

// NewLogUsageResponse instantiates a new LogUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogUsageResponse() *LogUsageResponse {
	this := LogUsageResponse{}
	return &this
}

// NewLogUsageResponseWithDefaults instantiates a new LogUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogUsageResponseWithDefaults() *LogUsageResponse {
	this := LogUsageResponse{}
	return &this
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *LogUsageResponse) GetUsage() LogUsageResponseUsage {
	if o == nil || IsNil(o.Usage) {
		var ret LogUsageResponseUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogUsageResponse) GetUsageOk() (*LogUsageResponseUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *LogUsageResponse) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given LogUsageResponseUsage and assigns it to the Usage field.
func (o *LogUsageResponse) SetUsage(v LogUsageResponseUsage) {
	o.Usage = &v
}

func (o LogUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogUsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableLogUsageResponse struct {
	value *LogUsageResponse
	isSet bool
}

func (v NullableLogUsageResponse) Get() *LogUsageResponse {
	return v.value
}

func (v *NullableLogUsageResponse) Set(val *LogUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogUsageResponse(val *LogUsageResponse) *NullableLogUsageResponse {
	return &NullableLogUsageResponse{value: val, isSet: true}
}

func (v NullableLogUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
