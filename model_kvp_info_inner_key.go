/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KvpInfoInnerKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KvpInfoInnerKey{}

// KvpInfoInnerKey struct for KvpInfoInnerKey
type KvpInfoInnerKey struct {
	// the identifier of the key.
	Text string `json:"text"`
	// the position in the log entry of the first character of the key (the first character in the log entry is at position 0).
	Start int32 `json:"start"`
	// the position in the log entry of the next character after the last character of the key.
	End int32 `json:"end"`
}

type _KvpInfoInnerKey KvpInfoInnerKey

// NewKvpInfoInnerKey instantiates a new KvpInfoInnerKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKvpInfoInnerKey(text string, start int32, end int32) *KvpInfoInnerKey {
	this := KvpInfoInnerKey{}
	this.Text = text
	this.Start = start
	this.End = end
	return &this
}

// NewKvpInfoInnerKeyWithDefaults instantiates a new KvpInfoInnerKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKvpInfoInnerKeyWithDefaults() *KvpInfoInnerKey {
	this := KvpInfoInnerKey{}
	return &this
}

// GetText returns the Text field value
func (o *KvpInfoInnerKey) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *KvpInfoInnerKey) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *KvpInfoInnerKey) SetText(v string) {
	o.Text = v
}

// GetStart returns the Start field value
func (o *KvpInfoInnerKey) GetStart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *KvpInfoInnerKey) GetStartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *KvpInfoInnerKey) SetStart(v int32) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *KvpInfoInnerKey) GetEnd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *KvpInfoInnerKey) GetEndOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *KvpInfoInnerKey) SetEnd(v int32) {
	o.End = v
}

func (o KvpInfoInnerKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KvpInfoInnerKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	return toSerialize, nil
}

func (o *KvpInfoInnerKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"start",
		"end",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKvpInfoInnerKey := _KvpInfoInnerKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKvpInfoInnerKey)

	if err != nil {
		return err
	}

	*o = KvpInfoInnerKey(varKvpInfoInnerKey)

	return err
}

type NullableKvpInfoInnerKey struct {
	value *KvpInfoInnerKey
	isSet bool
}

func (v NullableKvpInfoInnerKey) Get() *KvpInfoInnerKey {
	return v.value
}

func (v *NullableKvpInfoInnerKey) Set(val *KvpInfoInnerKey) {
	v.value = val
	v.isSet = true
}

func (v NullableKvpInfoInnerKey) IsSet() bool {
	return v.isSet
}

func (v *NullableKvpInfoInnerKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKvpInfoInnerKey(val *KvpInfoInnerKey) *NullableKvpInfoInnerKey {
	return &NullableKvpInfoInnerKey{value: val, isSet: true}
}

func (v NullableKvpInfoInnerKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKvpInfoInnerKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
