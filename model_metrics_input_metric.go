/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
)

// checks if the MetricsInputMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricsInputMetric{}

// MetricsInputMetric struct for MetricsInputMetric
type MetricsInputMetric struct {
	// The name of the pre-computed query.
	Name *string `json:"name,omitempty"`
	// The description of the pre-computed query.
	Description *string `json:"description,omitempty"`
	// This indicates whether the pre-computed query is enabled or not.
	Enabled interface{}             `json:"enabled,omitempty"`
	Logs    *MetricsInputMetricLogs `json:"logs,omitempty"`
	Leql    *LeqlMetrics            `json:"leql,omitempty"`
	// The time window in seconds, that each PCQ datapoint corresponds to.
	Resolution *int32 `json:"resolution,omitempty"`
	// The length of time in seconds, that the PCQ will be stored for.
	Retention *int32 `json:"retention,omitempty"`
}

// NewMetricsInputMetric instantiates a new MetricsInputMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricsInputMetric() *MetricsInputMetric {
	this := MetricsInputMetric{}
	return &this
}

// NewMetricsInputMetricWithDefaults instantiates a new MetricsInputMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsInputMetricWithDefaults() *MetricsInputMetric {
	this := MetricsInputMetric{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MetricsInputMetric) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsInputMetric) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MetricsInputMetric) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MetricsInputMetric) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MetricsInputMetric) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsInputMetric) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MetricsInputMetric) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MetricsInputMetric) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricsInputMetric) GetEnabled() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricsInputMetric) GetEnabledOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return &o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MetricsInputMetric) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given interface{} and assigns it to the Enabled field.
func (o *MetricsInputMetric) SetEnabled(v interface{}) {
	o.Enabled = v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *MetricsInputMetric) GetLogs() MetricsInputMetricLogs {
	if o == nil || IsNil(o.Logs) {
		var ret MetricsInputMetricLogs
		return ret
	}
	return *o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsInputMetric) GetLogsOk() (*MetricsInputMetricLogs, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *MetricsInputMetric) HasLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given MetricsInputMetricLogs and assigns it to the Logs field.
func (o *MetricsInputMetric) SetLogs(v MetricsInputMetricLogs) {
	o.Logs = &v
}

// GetLeql returns the Leql field value if set, zero value otherwise.
func (o *MetricsInputMetric) GetLeql() LeqlMetrics {
	if o == nil || IsNil(o.Leql) {
		var ret LeqlMetrics
		return ret
	}
	return *o.Leql
}

// GetLeqlOk returns a tuple with the Leql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsInputMetric) GetLeqlOk() (*LeqlMetrics, bool) {
	if o == nil || IsNil(o.Leql) {
		return nil, false
	}
	return o.Leql, true
}

// HasLeql returns a boolean if a field has been set.
func (o *MetricsInputMetric) HasLeql() bool {
	if o != nil && !IsNil(o.Leql) {
		return true
	}

	return false
}

// SetLeql gets a reference to the given LeqlMetrics and assigns it to the Leql field.
func (o *MetricsInputMetric) SetLeql(v LeqlMetrics) {
	o.Leql = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *MetricsInputMetric) GetResolution() int32 {
	if o == nil || IsNil(o.Resolution) {
		var ret int32
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsInputMetric) GetResolutionOk() (*int32, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *MetricsInputMetric) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given int32 and assigns it to the Resolution field.
func (o *MetricsInputMetric) SetResolution(v int32) {
	o.Resolution = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *MetricsInputMetric) GetRetention() int32 {
	if o == nil || IsNil(o.Retention) {
		var ret int32
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricsInputMetric) GetRetentionOk() (*int32, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *MetricsInputMetric) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given int32 and assigns it to the Retention field.
func (o *MetricsInputMetric) SetRetention(v int32) {
	o.Retention = &v
}

func (o MetricsInputMetric) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricsInputMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	if !IsNil(o.Leql) {
		toSerialize["leql"] = o.Leql
	}
	if !IsNil(o.Resolution) {
		toSerialize["resolution"] = o.Resolution
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	return toSerialize, nil
}

type NullableMetricsInputMetric struct {
	value *MetricsInputMetric
	isSet bool
}

func (v NullableMetricsInputMetric) Get() *MetricsInputMetric {
	return v.value
}

func (v *NullableMetricsInputMetric) Set(val *MetricsInputMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsInputMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsInputMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsInputMetric(val *MetricsInputMetric) *NullableMetricsInputMetric {
	return &NullableMetricsInputMetric{value: val, isSet: true}
}

func (v NullableMetricsInputMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsInputMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
