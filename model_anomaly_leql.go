/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AnomalyLeql type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnomalyLeql{}

// AnomalyLeql The [LEQL](https://docs.rapid7.com/insightidr/log-search/#write-a-leql-query) query used by this change detection rule to compute results.
type AnomalyLeql struct {
	// The `where()` clause of the [LEQL](https://docs.rapid7.com/insightidr/log-search/#write-a-leql-query) query, for example, `where(foo)`. If empty, the query matches all log entries.
	Statement *string     `json:"statement,omitempty"`
	Function  FunctionDef `json:"function"`
}

type _AnomalyLeql AnomalyLeql

// NewAnomalyLeql instantiates a new AnomalyLeql object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnomalyLeql(function FunctionDef) *AnomalyLeql {
	this := AnomalyLeql{}
	this.Function = function
	return &this
}

// NewAnomalyLeqlWithDefaults instantiates a new AnomalyLeql object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnomalyLeqlWithDefaults() *AnomalyLeql {
	this := AnomalyLeql{}
	return &this
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *AnomalyLeql) GetStatement() string {
	if o == nil || IsNil(o.Statement) {
		var ret string
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnomalyLeql) GetStatementOk() (*string, bool) {
	if o == nil || IsNil(o.Statement) {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *AnomalyLeql) HasStatement() bool {
	if o != nil && !IsNil(o.Statement) {
		return true
	}

	return false
}

// SetStatement gets a reference to the given string and assigns it to the Statement field.
func (o *AnomalyLeql) SetStatement(v string) {
	o.Statement = &v
}

// GetFunction returns the Function field value
func (o *AnomalyLeql) GetFunction() FunctionDef {
	if o == nil {
		var ret FunctionDef
		return ret
	}

	return o.Function
}

// GetFunctionOk returns a tuple with the Function field value
// and a boolean to check if the value has been set.
func (o *AnomalyLeql) GetFunctionOk() (*FunctionDef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Function, true
}

// SetFunction sets field value
func (o *AnomalyLeql) SetFunction(v FunctionDef) {
	o.Function = v
}

func (o AnomalyLeql) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnomalyLeql) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Statement) {
		toSerialize["statement"] = o.Statement
	}
	toSerialize["function"] = o.Function
	return toSerialize, nil
}

func (o *AnomalyLeql) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"function",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnomalyLeql := _AnomalyLeql{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnomalyLeql)

	if err != nil {
		return err
	}

	*o = AnomalyLeql(varAnomalyLeql)

	return err
}

type NullableAnomalyLeql struct {
	value *AnomalyLeql
	isSet bool
}

func (v NullableAnomalyLeql) Get() *AnomalyLeql {
	return v.value
}

func (v *NullableAnomalyLeql) Set(val *AnomalyLeql) {
	v.value = val
	v.isSet = true
}

func (v NullableAnomalyLeql) IsSet() bool {
	return v.isSet
}

func (v *NullableAnomalyLeql) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnomalyLeql(val *AnomalyLeql) *NullableAnomalyLeql {
	return &NullableAnomalyLeql{value: val, isSet: true}
}

func (v NullableAnomalyLeql) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnomalyLeql) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
