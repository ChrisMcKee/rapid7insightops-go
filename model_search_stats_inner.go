/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
)

// checks if the SearchStatsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchStatsInner{}

// SearchStatsInner struct for SearchStatsInner
type SearchStatsInner struct {
	// The unique ID of the query.
	QueryId *string `json:"query_id,omitempty"`
	// The date when the query was started, as a UNIX timestamp in milliseconds.
	Date *int32 `json:"date,omitempty"`
	// May contain some information on the source of the query. For example, if the value is `\"dashboard\"`, then the query was launched by a Log Search dashboard rather than explicitly by a user through the Log Search UI.
	Source     *string                     `json:"source,omitempty"`
	Leql       *SearchStatsInnerLeql       `json:"leql,omitempty"`
	Statistics *SearchStatsInnerStatistics `json:"statistics,omitempty"`
}

// NewSearchStatsInner instantiates a new SearchStatsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchStatsInner() *SearchStatsInner {
	this := SearchStatsInner{}
	return &this
}

// NewSearchStatsInnerWithDefaults instantiates a new SearchStatsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchStatsInnerWithDefaults() *SearchStatsInner {
	this := SearchStatsInner{}
	return &this
}

// GetQueryId returns the QueryId field value if set, zero value otherwise.
func (o *SearchStatsInner) GetQueryId() string {
	if o == nil || IsNil(o.QueryId) {
		var ret string
		return ret
	}
	return *o.QueryId
}

// GetQueryIdOk returns a tuple with the QueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStatsInner) GetQueryIdOk() (*string, bool) {
	if o == nil || IsNil(o.QueryId) {
		return nil, false
	}
	return o.QueryId, true
}

// HasQueryId returns a boolean if a field has been set.
func (o *SearchStatsInner) HasQueryId() bool {
	if o != nil && !IsNil(o.QueryId) {
		return true
	}

	return false
}

// SetQueryId gets a reference to the given string and assigns it to the QueryId field.
func (o *SearchStatsInner) SetQueryId(v string) {
	o.QueryId = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *SearchStatsInner) GetDate() int32 {
	if o == nil || IsNil(o.Date) {
		var ret int32
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStatsInner) GetDateOk() (*int32, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *SearchStatsInner) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int32 and assigns it to the Date field.
func (o *SearchStatsInner) SetDate(v int32) {
	o.Date = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SearchStatsInner) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStatsInner) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SearchStatsInner) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *SearchStatsInner) SetSource(v string) {
	o.Source = &v
}

// GetLeql returns the Leql field value if set, zero value otherwise.
func (o *SearchStatsInner) GetLeql() SearchStatsInnerLeql {
	if o == nil || IsNil(o.Leql) {
		var ret SearchStatsInnerLeql
		return ret
	}
	return *o.Leql
}

// GetLeqlOk returns a tuple with the Leql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStatsInner) GetLeqlOk() (*SearchStatsInnerLeql, bool) {
	if o == nil || IsNil(o.Leql) {
		return nil, false
	}
	return o.Leql, true
}

// HasLeql returns a boolean if a field has been set.
func (o *SearchStatsInner) HasLeql() bool {
	if o != nil && !IsNil(o.Leql) {
		return true
	}

	return false
}

// SetLeql gets a reference to the given SearchStatsInnerLeql and assigns it to the Leql field.
func (o *SearchStatsInner) SetLeql(v SearchStatsInnerLeql) {
	o.Leql = &v
}

// GetStatistics returns the Statistics field value if set, zero value otherwise.
func (o *SearchStatsInner) GetStatistics() SearchStatsInnerStatistics {
	if o == nil || IsNil(o.Statistics) {
		var ret SearchStatsInnerStatistics
		return ret
	}
	return *o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchStatsInner) GetStatisticsOk() (*SearchStatsInnerStatistics, bool) {
	if o == nil || IsNil(o.Statistics) {
		return nil, false
	}
	return o.Statistics, true
}

// HasStatistics returns a boolean if a field has been set.
func (o *SearchStatsInner) HasStatistics() bool {
	if o != nil && !IsNil(o.Statistics) {
		return true
	}

	return false
}

// SetStatistics gets a reference to the given SearchStatsInnerStatistics and assigns it to the Statistics field.
func (o *SearchStatsInner) SetStatistics(v SearchStatsInnerStatistics) {
	o.Statistics = &v
}

func (o SearchStatsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchStatsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueryId) {
		toSerialize["query_id"] = o.QueryId
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Leql) {
		toSerialize["leql"] = o.Leql
	}
	if !IsNil(o.Statistics) {
		toSerialize["statistics"] = o.Statistics
	}
	return toSerialize, nil
}

type NullableSearchStatsInner struct {
	value *SearchStatsInner
	isSet bool
}

func (v NullableSearchStatsInner) Get() *SearchStatsInner {
	return v.value
}

func (v *NullableSearchStatsInner) Set(val *SearchStatsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchStatsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchStatsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchStatsInner(val *SearchStatsInner) *NullableSearchStatsInner {
	return &NullableSearchStatsInner{value: val, isSet: true}
}

func (v NullableSearchStatsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchStatsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
