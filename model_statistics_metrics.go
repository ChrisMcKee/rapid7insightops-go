/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
)

// checks if the StatisticsMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatisticsMetrics{}

// StatisticsMetrics Holds the results of the query.
type StatisticsMetrics struct {
	// The type of calculation performed.
	Type *string `json:"type,omitempty"`
	// The key that the calculation was performed on.
	Key *string `json:"key,omitempty"`
	// The length of each element of the time series, in seconds.
	Resolution *int32                             `json:"resolution,omitempty"`
	Timeseries []StatisticsMetricsTimeseriesInner `json:"timeseries,omitempty"`
	// The total of all the values in the timeseries.
	Result *float32 `json:"result,omitempty"`
}

// NewStatisticsMetrics instantiates a new StatisticsMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatisticsMetrics() *StatisticsMetrics {
	this := StatisticsMetrics{}
	return &this
}

// NewStatisticsMetricsWithDefaults instantiates a new StatisticsMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsMetricsWithDefaults() *StatisticsMetrics {
	this := StatisticsMetrics{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StatisticsMetrics) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticsMetrics) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StatisticsMetrics) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StatisticsMetrics) SetType(v string) {
	o.Type = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *StatisticsMetrics) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticsMetrics) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *StatisticsMetrics) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *StatisticsMetrics) SetKey(v string) {
	o.Key = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *StatisticsMetrics) GetResolution() int32 {
	if o == nil || IsNil(o.Resolution) {
		var ret int32
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticsMetrics) GetResolutionOk() (*int32, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *StatisticsMetrics) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given int32 and assigns it to the Resolution field.
func (o *StatisticsMetrics) SetResolution(v int32) {
	o.Resolution = &v
}

// GetTimeseries returns the Timeseries field value if set, zero value otherwise.
func (o *StatisticsMetrics) GetTimeseries() []StatisticsMetricsTimeseriesInner {
	if o == nil || IsNil(o.Timeseries) {
		var ret []StatisticsMetricsTimeseriesInner
		return ret
	}
	return o.Timeseries
}

// GetTimeseriesOk returns a tuple with the Timeseries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticsMetrics) GetTimeseriesOk() ([]StatisticsMetricsTimeseriesInner, bool) {
	if o == nil || IsNil(o.Timeseries) {
		return nil, false
	}
	return o.Timeseries, true
}

// HasTimeseries returns a boolean if a field has been set.
func (o *StatisticsMetrics) HasTimeseries() bool {
	if o != nil && !IsNil(o.Timeseries) {
		return true
	}

	return false
}

// SetTimeseries gets a reference to the given []StatisticsMetricsTimeseriesInner and assigns it to the Timeseries field.
func (o *StatisticsMetrics) SetTimeseries(v []StatisticsMetricsTimeseriesInner) {
	o.Timeseries = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *StatisticsMetrics) GetResult() float32 {
	if o == nil || IsNil(o.Result) {
		var ret float32
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticsMetrics) GetResultOk() (*float32, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *StatisticsMetrics) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given float32 and assigns it to the Result field.
func (o *StatisticsMetrics) SetResult(v float32) {
	o.Result = &v
}

func (o StatisticsMetrics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatisticsMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Resolution) {
		toSerialize["resolution"] = o.Resolution
	}
	if !IsNil(o.Timeseries) {
		toSerialize["timeseries"] = o.Timeseries
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableStatisticsMetrics struct {
	value *StatisticsMetrics
	isSet bool
}

func (v NullableStatisticsMetrics) Get() *StatisticsMetrics {
	return v.value
}

func (v *NullableStatisticsMetrics) Set(val *StatisticsMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticsMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticsMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticsMetrics(val *StatisticsMetrics) *NullableStatisticsMetrics {
	return &NullableStatisticsMetrics{value: val, isSet: true}
}

func (v NullableStatisticsMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticsMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
