/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
)

// checks if the LogUsageResponseUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogUsageResponseUsage{}

// LogUsageResponseUsage The total number of bytes written to the log each day.
type LogUsageResponseUsage struct {
	// The ID of the log (UUID).
	Id         *string                          `json:"id,omitempty"`
	Period     *AccountsUsageResponsePeriod     `json:"period,omitempty"`
	DailyUsage *LogUsageResponseUsageDailyUsage `json:"daily_usage,omitempty"`
}

// NewLogUsageResponseUsage instantiates a new LogUsageResponseUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogUsageResponseUsage() *LogUsageResponseUsage {
	this := LogUsageResponseUsage{}
	return &this
}

// NewLogUsageResponseUsageWithDefaults instantiates a new LogUsageResponseUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogUsageResponseUsageWithDefaults() *LogUsageResponseUsage {
	this := LogUsageResponseUsage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LogUsageResponseUsage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogUsageResponseUsage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LogUsageResponseUsage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LogUsageResponseUsage) SetId(v string) {
	o.Id = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *LogUsageResponseUsage) GetPeriod() AccountsUsageResponsePeriod {
	if o == nil || IsNil(o.Period) {
		var ret AccountsUsageResponsePeriod
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogUsageResponseUsage) GetPeriodOk() (*AccountsUsageResponsePeriod, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *LogUsageResponseUsage) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given AccountsUsageResponsePeriod and assigns it to the Period field.
func (o *LogUsageResponseUsage) SetPeriod(v AccountsUsageResponsePeriod) {
	o.Period = &v
}

// GetDailyUsage returns the DailyUsage field value if set, zero value otherwise.
func (o *LogUsageResponseUsage) GetDailyUsage() LogUsageResponseUsageDailyUsage {
	if o == nil || IsNil(o.DailyUsage) {
		var ret LogUsageResponseUsageDailyUsage
		return ret
	}
	return *o.DailyUsage
}

// GetDailyUsageOk returns a tuple with the DailyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogUsageResponseUsage) GetDailyUsageOk() (*LogUsageResponseUsageDailyUsage, bool) {
	if o == nil || IsNil(o.DailyUsage) {
		return nil, false
	}
	return o.DailyUsage, true
}

// HasDailyUsage returns a boolean if a field has been set.
func (o *LogUsageResponseUsage) HasDailyUsage() bool {
	if o != nil && !IsNil(o.DailyUsage) {
		return true
	}

	return false
}

// SetDailyUsage gets a reference to the given LogUsageResponseUsageDailyUsage and assigns it to the DailyUsage field.
func (o *LogUsageResponseUsage) SetDailyUsage(v LogUsageResponseUsageDailyUsage) {
	o.DailyUsage = &v
}

func (o LogUsageResponseUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogUsageResponseUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.DailyUsage) {
		toSerialize["daily_usage"] = o.DailyUsage
	}
	return toSerialize, nil
}

type NullableLogUsageResponseUsage struct {
	value *LogUsageResponseUsage
	isSet bool
}

func (v NullableLogUsageResponseUsage) Get() *LogUsageResponseUsage {
	return v.value
}

func (v *NullableLogUsageResponseUsage) Set(val *LogUsageResponseUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableLogUsageResponseUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableLogUsageResponseUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogUsageResponseUsage(val *LogUsageResponseUsage) *NullableLogUsageResponseUsage {
	return &NullableLogUsageResponseUsage{value: val, isSet: true}
}

func (v NullableLogUsageResponseUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogUsageResponseUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
