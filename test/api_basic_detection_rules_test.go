/*
InsightOps REST API

Testing BasicDetectionRulesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package insightops

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/chrismckee/rapid7insightops-go"
)

func Test_insightops_BasicDetectionRulesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BasicDetectionRulesAPIService DeleteLabelById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var labelId string

		httpRes, err := apiClient.BasicDetectionRulesAPI.DeleteLabelById(context.Background(), labelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService DeleteManagementTagActionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionId string

		httpRes, err := apiClient.BasicDetectionRulesAPI.DeleteManagementTagActionById(context.Background(), actionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService DeleteManagementTagById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagId string

		httpRes, err := apiClient.BasicDetectionRulesAPI.DeleteManagementTagById(context.Background(), tagId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService DeleteManagementTargetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetId string

		httpRes, err := apiClient.BasicDetectionRulesAPI.DeleteManagementTargetById(context.Background(), targetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetLabelById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var labelId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetLabelById(context.Background(), labelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetLabels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetManagementAlertNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetManagementAlertNotificationSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetManagementTagActionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetManagementTagActionById(context.Background(), actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetManagementTagActionTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetManagementTagActionTargets(context.Background(), actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetManagementTagById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetManagementTagById(context.Background(), tagId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetManagementTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetManagementTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetManagementTargetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetManagementTargetById(context.Background(), targetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService GetManagementTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.GetManagementTargets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PatchLabelById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var labelId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PatchLabelById(context.Background(), labelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PatchManagementTagActionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PatchManagementTagActionById(context.Background(), actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PatchManagementTagActionTargetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PatchManagementTagActionTargetById(context.Background(), actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PatchManagementTagById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PatchManagementTagById(context.Background(), tagId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PostLabels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PostLabels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PostManagementTagActions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PostManagementTagActions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PostManagementTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PostManagementTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PostManagementTargets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PostManagementTargets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PutLabelById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var labelId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PutLabelById(context.Background(), labelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PutManagementTagActionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PutManagementTagActionById(context.Background(), actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PutManagementTagById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PutManagementTagById(context.Background(), tagId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicDetectionRulesAPIService PutManagementTargetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetId string

		resp, httpRes, err := apiClient.BasicDetectionRulesAPI.PutManagementTargetById(context.Background(), targetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
