/*
InsightOps REST API

Testing PreComputedQueriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package insightops

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/chrismckee/rapid7insightops-go"
)

func Test_insightops_PreComputedQueriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PreComputedQueriesAPIService MetricsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PreComputedQueriesAPI.MetricsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PreComputedQueriesAPIService MetricsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metricId string

		httpRes, err := apiClient.PreComputedQueriesAPI.MetricsDelete(context.Background(), metricId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PreComputedQueriesAPIService MetricsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metricId string

		resp, httpRes, err := apiClient.PreComputedQueriesAPI.MetricsPut(context.Background(), metricId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PreComputedQueriesAPIService MetricsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metricId string

		resp, httpRes, err := apiClient.PreComputedQueriesAPI.MetricsRetrieve(context.Background(), metricId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PreComputedQueriesAPIService MetricsRetrieveAll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PreComputedQueriesAPI.MetricsRetrieveAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PreComputedQueriesAPIService QueryMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metricId string

		resp, httpRes, err := apiClient.PreComputedQueriesAPI.QueryMetrics(context.Background(), metricId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
