/*
InsightOps REST API

Testing LogsLogSetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package insightops

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/chrismckee/rapid7insightops-go"
)

func Test_insightops_LogsLogSetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogsLogSetsAPIService DeleteLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.LogsLogSetsAPI.DeleteLog(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService DeleteManagementLogsetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var logsetId string

		httpRes, err := apiClient.LogsLogSetsAPI.DeleteManagementLogsetById(context.Background(), logsetId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService GetLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.LogsLogSetsAPI.GetLog(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService GetLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogsLogSetsAPI.GetLogs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService GetManagementLogsetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var logsetId string

		resp, httpRes, err := apiClient.LogsLogSetsAPI.GetManagementLogsetById(context.Background(), logsetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService GetManagementLogsets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogsLogSetsAPI.GetManagementLogsets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService PostLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogsLogSetsAPI.PostLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService PostManagementLogsets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogsLogSetsAPI.PostManagementLogsets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService PutLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.LogsLogSetsAPI.PutLog(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogsLogSetsAPIService PutManagementLogsetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var logsetId string

		resp, httpRes, err := apiClient.LogsLogSetsAPI.PutManagementLogsetById(context.Background(), logsetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
