/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventsContinuation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsContinuation{}

// EventsContinuation struct for EventsContinuation
type EventsContinuation struct {
	// The log keys of the logs which the query is run against.
	Logs []string `json:"logs"`
	Leql Leql     `json:"leql"`
	// The completion of the query in percent (0 to 99).
	Progress int32 `json:"progress"`
	// The query ID which can be used to poll the query on the **_/query/{id}** endpoint.
	Id string `json:"id"`
	// The result of the query - the matching log entries (with metadata). It is empty for 202 responses.
	Events []EventQuery         `json:"events"`
	Links  []QueryApiLinksInner `json:"links"`
}

type _EventsContinuation EventsContinuation

// NewEventsContinuation instantiates a new EventsContinuation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsContinuation(logs []string, leql Leql, progress int32, id string, events []EventQuery, links []QueryApiLinksInner) *EventsContinuation {
	this := EventsContinuation{}
	this.Logs = logs
	this.Leql = leql
	this.Progress = progress
	this.Id = id
	this.Events = events
	this.Links = links
	return &this
}

// NewEventsContinuationWithDefaults instantiates a new EventsContinuation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsContinuationWithDefaults() *EventsContinuation {
	this := EventsContinuation{}
	return &this
}

// GetLogs returns the Logs field value
func (o *EventsContinuation) GetLogs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *EventsContinuation) GetLogsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logs, true
}

// SetLogs sets field value
func (o *EventsContinuation) SetLogs(v []string) {
	o.Logs = v
}

// GetLeql returns the Leql field value
func (o *EventsContinuation) GetLeql() Leql {
	if o == nil {
		var ret Leql
		return ret
	}

	return o.Leql
}

// GetLeqlOk returns a tuple with the Leql field value
// and a boolean to check if the value has been set.
func (o *EventsContinuation) GetLeqlOk() (*Leql, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Leql, true
}

// SetLeql sets field value
func (o *EventsContinuation) SetLeql(v Leql) {
	o.Leql = v
}

// GetProgress returns the Progress field value
func (o *EventsContinuation) GetProgress() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value
// and a boolean to check if the value has been set.
func (o *EventsContinuation) GetProgressOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Progress, true
}

// SetProgress sets field value
func (o *EventsContinuation) SetProgress(v int32) {
	o.Progress = v
}

// GetId returns the Id field value
func (o *EventsContinuation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventsContinuation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventsContinuation) SetId(v string) {
	o.Id = v
}

// GetEvents returns the Events field value
func (o *EventsContinuation) GetEvents() []EventQuery {
	if o == nil {
		var ret []EventQuery
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventsContinuation) GetEventsOk() ([]EventQuery, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *EventsContinuation) SetEvents(v []EventQuery) {
	o.Events = v
}

// GetLinks returns the Links field value
func (o *EventsContinuation) GetLinks() []QueryApiLinksInner {
	if o == nil {
		var ret []QueryApiLinksInner
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *EventsContinuation) GetLinksOk() ([]QueryApiLinksInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *EventsContinuation) SetLinks(v []QueryApiLinksInner) {
	o.Links = v
}

func (o EventsContinuation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsContinuation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logs"] = o.Logs
	toSerialize["leql"] = o.Leql
	toSerialize["progress"] = o.Progress
	toSerialize["id"] = o.Id
	toSerialize["events"] = o.Events
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *EventsContinuation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logs",
		"leql",
		"progress",
		"id",
		"events",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsContinuation := _EventsContinuation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventsContinuation)

	if err != nil {
		return err
	}

	*o = EventsContinuation(varEventsContinuation)

	return err
}

type NullableEventsContinuation struct {
	value *EventsContinuation
	isSet bool
}

func (v NullableEventsContinuation) Get() *EventsContinuation {
	return v.value
}

func (v *NullableEventsContinuation) Set(val *EventsContinuation) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsContinuation) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsContinuation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsContinuation(val *EventsContinuation) *NullableEventsContinuation {
	return &NullableEventsContinuation{value: val, isSet: true}
}

func (v NullableEventsContinuation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsContinuation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
