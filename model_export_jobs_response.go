/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ExportJobsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportJobsResponse{}

// ExportJobsResponse struct for ExportJobsResponse
type ExportJobsResponse struct {
	ExportJobs []ExportJob `json:"export_jobs"`
}

type _ExportJobsResponse ExportJobsResponse

// NewExportJobsResponse instantiates a new ExportJobsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportJobsResponse(exportJobs []ExportJob) *ExportJobsResponse {
	this := ExportJobsResponse{}
	this.ExportJobs = exportJobs
	return &this
}

// NewExportJobsResponseWithDefaults instantiates a new ExportJobsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportJobsResponseWithDefaults() *ExportJobsResponse {
	this := ExportJobsResponse{}
	return &this
}

// GetExportJobs returns the ExportJobs field value
func (o *ExportJobsResponse) GetExportJobs() []ExportJob {
	if o == nil {
		var ret []ExportJob
		return ret
	}

	return o.ExportJobs
}

// GetExportJobsOk returns a tuple with the ExportJobs field value
// and a boolean to check if the value has been set.
func (o *ExportJobsResponse) GetExportJobsOk() ([]ExportJob, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExportJobs, true
}

// SetExportJobs sets field value
func (o *ExportJobsResponse) SetExportJobs(v []ExportJob) {
	o.ExportJobs = v
}

func (o ExportJobsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportJobsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["export_jobs"] = o.ExportJobs
	return toSerialize, nil
}

func (o *ExportJobsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"export_jobs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExportJobsResponse := _ExportJobsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExportJobsResponse)

	if err != nil {
		return err
	}

	*o = ExportJobsResponse(varExportJobsResponse)

	return err
}

type NullableExportJobsResponse struct {
	value *ExportJobsResponse
	isSet bool
}

func (v NullableExportJobsResponse) Get() *ExportJobsResponse {
	return v.value
}

func (v *NullableExportJobsResponse) Set(val *ExportJobsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExportJobsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExportJobsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportJobsResponse(val *ExportJobsResponse) *NullableExportJobsResponse {
	return &NullableExportJobsResponse{value: val, isSet: true}
}

func (v NullableExportJobsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportJobsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
