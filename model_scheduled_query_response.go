/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ScheduledQueryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledQueryResponse{}

// ScheduledQueryResponse The configurations for the two queries that are executed at regular 10-minute intervals. Notifications will be triggered when there is a large enough difference between the two (defined by the `threshold_value` parameter).
type ScheduledQueryResponse struct {
	// ID of the scheduled query associated with this change detection rule.
	Id string `json:"id"`
	// The name of the scheduled query.
	Name *string      `json:"name,omitempty"`
	Leql *AnomalyLeql `json:"leql,omitempty"`
	// Defines the timerange for the two queries, along with the `time_period` parameter.  Two queries will be run: the timerange of the first, more recent query, will end at the current system time;  the timerange of the older query will end at the current system time minus the time specified by the `timeframe_value` & `timeframe_period` parameters.
	TimeValue *int32 `json:"time_value,omitempty"`
	// Defines the timerange for the two queries, along with the `time_value` parameter.
	TimePeriod *string `json:"time_period,omitempty"`
	// Defines the \"offset\" for the older of the two queries along with the `timeframe_period` parameter. For example, if the `timeframe_value` is set to 1 and `timeframe_period` is set to `Week`, then the time range for the older of the two queries will end at the current system time minus 1 week.
	TimeframeValue *int32 `json:"timeframe_value,omitempty"`
	// Defines the \"offset\" for the older of the two queries, along with the `timeframe_value` parameter.
	TimeframePeriod *string `json:"timeframe_period,omitempty"`
}

type _ScheduledQueryResponse ScheduledQueryResponse

// NewScheduledQueryResponse instantiates a new ScheduledQueryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledQueryResponse(id string) *ScheduledQueryResponse {
	this := ScheduledQueryResponse{}
	this.Id = id
	return &this
}

// NewScheduledQueryResponseWithDefaults instantiates a new ScheduledQueryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledQueryResponseWithDefaults() *ScheduledQueryResponse {
	this := ScheduledQueryResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ScheduledQueryResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScheduledQueryResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScheduledQueryResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScheduledQueryResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledQueryResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScheduledQueryResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScheduledQueryResponse) SetName(v string) {
	o.Name = &v
}

// GetLeql returns the Leql field value if set, zero value otherwise.
func (o *ScheduledQueryResponse) GetLeql() AnomalyLeql {
	if o == nil || IsNil(o.Leql) {
		var ret AnomalyLeql
		return ret
	}
	return *o.Leql
}

// GetLeqlOk returns a tuple with the Leql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledQueryResponse) GetLeqlOk() (*AnomalyLeql, bool) {
	if o == nil || IsNil(o.Leql) {
		return nil, false
	}
	return o.Leql, true
}

// HasLeql returns a boolean if a field has been set.
func (o *ScheduledQueryResponse) HasLeql() bool {
	if o != nil && !IsNil(o.Leql) {
		return true
	}

	return false
}

// SetLeql gets a reference to the given AnomalyLeql and assigns it to the Leql field.
func (o *ScheduledQueryResponse) SetLeql(v AnomalyLeql) {
	o.Leql = &v
}

// GetTimeValue returns the TimeValue field value if set, zero value otherwise.
func (o *ScheduledQueryResponse) GetTimeValue() int32 {
	if o == nil || IsNil(o.TimeValue) {
		var ret int32
		return ret
	}
	return *o.TimeValue
}

// GetTimeValueOk returns a tuple with the TimeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledQueryResponse) GetTimeValueOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeValue) {
		return nil, false
	}
	return o.TimeValue, true
}

// HasTimeValue returns a boolean if a field has been set.
func (o *ScheduledQueryResponse) HasTimeValue() bool {
	if o != nil && !IsNil(o.TimeValue) {
		return true
	}

	return false
}

// SetTimeValue gets a reference to the given int32 and assigns it to the TimeValue field.
func (o *ScheduledQueryResponse) SetTimeValue(v int32) {
	o.TimeValue = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *ScheduledQueryResponse) GetTimePeriod() string {
	if o == nil || IsNil(o.TimePeriod) {
		var ret string
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledQueryResponse) GetTimePeriodOk() (*string, bool) {
	if o == nil || IsNil(o.TimePeriod) {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *ScheduledQueryResponse) HasTimePeriod() bool {
	if o != nil && !IsNil(o.TimePeriod) {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given string and assigns it to the TimePeriod field.
func (o *ScheduledQueryResponse) SetTimePeriod(v string) {
	o.TimePeriod = &v
}

// GetTimeframeValue returns the TimeframeValue field value if set, zero value otherwise.
func (o *ScheduledQueryResponse) GetTimeframeValue() int32 {
	if o == nil || IsNil(o.TimeframeValue) {
		var ret int32
		return ret
	}
	return *o.TimeframeValue
}

// GetTimeframeValueOk returns a tuple with the TimeframeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledQueryResponse) GetTimeframeValueOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeframeValue) {
		return nil, false
	}
	return o.TimeframeValue, true
}

// HasTimeframeValue returns a boolean if a field has been set.
func (o *ScheduledQueryResponse) HasTimeframeValue() bool {
	if o != nil && !IsNil(o.TimeframeValue) {
		return true
	}

	return false
}

// SetTimeframeValue gets a reference to the given int32 and assigns it to the TimeframeValue field.
func (o *ScheduledQueryResponse) SetTimeframeValue(v int32) {
	o.TimeframeValue = &v
}

// GetTimeframePeriod returns the TimeframePeriod field value if set, zero value otherwise.
func (o *ScheduledQueryResponse) GetTimeframePeriod() string {
	if o == nil || IsNil(o.TimeframePeriod) {
		var ret string
		return ret
	}
	return *o.TimeframePeriod
}

// GetTimeframePeriodOk returns a tuple with the TimeframePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledQueryResponse) GetTimeframePeriodOk() (*string, bool) {
	if o == nil || IsNil(o.TimeframePeriod) {
		return nil, false
	}
	return o.TimeframePeriod, true
}

// HasTimeframePeriod returns a boolean if a field has been set.
func (o *ScheduledQueryResponse) HasTimeframePeriod() bool {
	if o != nil && !IsNil(o.TimeframePeriod) {
		return true
	}

	return false
}

// SetTimeframePeriod gets a reference to the given string and assigns it to the TimeframePeriod field.
func (o *ScheduledQueryResponse) SetTimeframePeriod(v string) {
	o.TimeframePeriod = &v
}

func (o ScheduledQueryResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledQueryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Leql) {
		toSerialize["leql"] = o.Leql
	}
	if !IsNil(o.TimeValue) {
		toSerialize["time_value"] = o.TimeValue
	}
	if !IsNil(o.TimePeriod) {
		toSerialize["time_period"] = o.TimePeriod
	}
	if !IsNil(o.TimeframeValue) {
		toSerialize["timeframe_value"] = o.TimeframeValue
	}
	if !IsNil(o.TimeframePeriod) {
		toSerialize["timeframe_period"] = o.TimeframePeriod
	}
	return toSerialize, nil
}

func (o *ScheduledQueryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduledQueryResponse := _ScheduledQueryResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduledQueryResponse)

	if err != nil {
		return err
	}

	*o = ScheduledQueryResponse(varScheduledQueryResponse)

	return err
}

type NullableScheduledQueryResponse struct {
	value *ScheduledQueryResponse
	isSet bool
}

func (v NullableScheduledQueryResponse) Get() *ScheduledQueryResponse {
	return v.value
}

func (v *NullableScheduledQueryResponse) Set(val *ScheduledQueryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledQueryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledQueryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledQueryResponse(val *ScheduledQueryResponse) *NullableScheduledQueryResponse {
	return &NullableScheduledQueryResponse{value: val, isSet: true}
}

func (v NullableScheduledQueryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledQueryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
