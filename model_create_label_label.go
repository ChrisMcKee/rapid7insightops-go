/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateLabelLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLabelLabel{}

// CreateLabelLabel The created label.
type CreateLabelLabel struct {
	// The name of the label.
	Name string `json:"name"`
	// The color of the label in HEX code.
	Color string `json:"color"`
}

type _CreateLabelLabel CreateLabelLabel

// NewCreateLabelLabel instantiates a new CreateLabelLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLabelLabel(name string, color string) *CreateLabelLabel {
	this := CreateLabelLabel{}
	this.Name = name
	this.Color = color
	return &this
}

// NewCreateLabelLabelWithDefaults instantiates a new CreateLabelLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLabelLabelWithDefaults() *CreateLabelLabel {
	this := CreateLabelLabel{}
	return &this
}

// GetName returns the Name field value
func (o *CreateLabelLabel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateLabelLabel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateLabelLabel) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value
func (o *CreateLabelLabel) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *CreateLabelLabel) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *CreateLabelLabel) SetColor(v string) {
	o.Color = v
}

func (o CreateLabelLabel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLabelLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["color"] = o.Color
	return toSerialize, nil
}

func (o *CreateLabelLabel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateLabelLabel := _CreateLabelLabel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateLabelLabel)

	if err != nil {
		return err
	}

	*o = CreateLabelLabel(varCreateLabelLabel)

	return err
}

type NullableCreateLabelLabel struct {
	value *CreateLabelLabel
	isSet bool
}

func (v NullableCreateLabelLabel) Get() *CreateLabelLabel {
	return v.value
}

func (v *NullableCreateLabelLabel) Set(val *CreateLabelLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLabelLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLabelLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLabelLabel(val *CreateLabelLabel) *NullableCreateLabelLabel {
	return &NullableCreateLabelLabel{value: val, isSet: true}
}

func (v NullableCreateLabelLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLabelLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
