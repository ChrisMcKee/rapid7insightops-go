/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GroupsTimeseriesInnerValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupsTimeseriesInnerValue{}

// GroupsTimeseriesInnerValue struct for GroupsTimeseriesInnerValue
type GroupsTimeseriesInnerValue struct {
	// For 'groupby' queries, holds the timeseries object for each group.
	GroupTimeseries []map[string]GroupsTimeseriesInnerValue `json:"group_timeseries"`
	Series          []Stats                                 `json:"series"`
	Totals          Stats                                   `json:"totals"`
}

type _GroupsTimeseriesInnerValue GroupsTimeseriesInnerValue

// NewGroupsTimeseriesInnerValue instantiates a new GroupsTimeseriesInnerValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupsTimeseriesInnerValue(groupTimeseries []map[string]GroupsTimeseriesInnerValue, series []Stats, totals Stats) *GroupsTimeseriesInnerValue {
	this := GroupsTimeseriesInnerValue{}
	this.GroupTimeseries = groupTimeseries
	this.Series = series
	this.Totals = totals
	return &this
}

// NewGroupsTimeseriesInnerValueWithDefaults instantiates a new GroupsTimeseriesInnerValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupsTimeseriesInnerValueWithDefaults() *GroupsTimeseriesInnerValue {
	this := GroupsTimeseriesInnerValue{}
	return &this
}

// GetGroupTimeseries returns the GroupTimeseries field value
func (o *GroupsTimeseriesInnerValue) GetGroupTimeseries() []map[string]GroupsTimeseriesInnerValue {
	if o == nil {
		var ret []map[string]GroupsTimeseriesInnerValue
		return ret
	}

	return o.GroupTimeseries
}

// GetGroupTimeseriesOk returns a tuple with the GroupTimeseries field value
// and a boolean to check if the value has been set.
func (o *GroupsTimeseriesInnerValue) GetGroupTimeseriesOk() ([]map[string]GroupsTimeseriesInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupTimeseries, true
}

// SetGroupTimeseries sets field value
func (o *GroupsTimeseriesInnerValue) SetGroupTimeseries(v []map[string]GroupsTimeseriesInnerValue) {
	o.GroupTimeseries = v
}

// GetSeries returns the Series field value
func (o *GroupsTimeseriesInnerValue) GetSeries() []Stats {
	if o == nil {
		var ret []Stats
		return ret
	}

	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value
// and a boolean to check if the value has been set.
func (o *GroupsTimeseriesInnerValue) GetSeriesOk() ([]Stats, bool) {
	if o == nil {
		return nil, false
	}
	return o.Series, true
}

// SetSeries sets field value
func (o *GroupsTimeseriesInnerValue) SetSeries(v []Stats) {
	o.Series = v
}

// GetTotals returns the Totals field value
func (o *GroupsTimeseriesInnerValue) GetTotals() Stats {
	if o == nil {
		var ret Stats
		return ret
	}

	return o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value
// and a boolean to check if the value has been set.
func (o *GroupsTimeseriesInnerValue) GetTotalsOk() (*Stats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Totals, true
}

// SetTotals sets field value
func (o *GroupsTimeseriesInnerValue) SetTotals(v Stats) {
	o.Totals = v
}

func (o GroupsTimeseriesInnerValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupsTimeseriesInnerValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_timeseries"] = o.GroupTimeseries
	toSerialize["series"] = o.Series
	toSerialize["totals"] = o.Totals
	return toSerialize, nil
}

func (o *GroupsTimeseriesInnerValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_timeseries",
		"series",
		"totals",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupsTimeseriesInnerValue := _GroupsTimeseriesInnerValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupsTimeseriesInnerValue)

	if err != nil {
		return err
	}

	*o = GroupsTimeseriesInnerValue(varGroupsTimeseriesInnerValue)

	return err
}

type NullableGroupsTimeseriesInnerValue struct {
	value *GroupsTimeseriesInnerValue
	isSet bool
}

func (v NullableGroupsTimeseriesInnerValue) Get() *GroupsTimeseriesInnerValue {
	return v.value
}

func (v *NullableGroupsTimeseriesInnerValue) Set(val *GroupsTimeseriesInnerValue) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupsTimeseriesInnerValue) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupsTimeseriesInnerValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupsTimeseriesInnerValue(val *GroupsTimeseriesInnerValue) *NullableGroupsTimeseriesInnerValue {
	return &NullableGroupsTimeseriesInnerValue{value: val, isSet: true}
}

func (v NullableGroupsTimeseriesInnerValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupsTimeseriesInnerValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
