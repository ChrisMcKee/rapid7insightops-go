/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ExportJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportJob{}

// ExportJob struct for ExportJob
type ExportJob struct {
	// The UUID of the job.
	Id string `json:"id"`
	// The Unix timestamp of when the job was created in milliseconds.
	Created int32 `json:"created"`
	// The export format. This can only be 'csv'.
	Format string `json:"format"`
	// The percentage progress of the export job.
	Percentage int32 `json:"percentage"`
	// The status of the export job.   * `Started`: The job has been accepted and registered.   * `Retrieving`: The query is being executed and the events are being retrieved and streamed to disk.   * `Converting`: The events are being run through the converter pipeline.   * `Uploading`: The results are being uploaded to the S3 bucket.   * `Completed`: The job has been completed and the direct download link is available.   * `Failed`: The export job has failed. Report this to support for analysis and resolution.
	Status string `json:"status"`
	// The Unix timestamp of when the job result will be deleted.
	Expires int32                 `json:"expires"`
	Links   []ExportJobLinksInner `json:"links"`
}

type _ExportJob ExportJob

// NewExportJob instantiates a new ExportJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportJob(id string, created int32, format string, percentage int32, status string, expires int32, links []ExportJobLinksInner) *ExportJob {
	this := ExportJob{}
	this.Id = id
	this.Created = created
	this.Format = format
	this.Percentage = percentage
	this.Status = status
	this.Expires = expires
	this.Links = links
	return &this
}

// NewExportJobWithDefaults instantiates a new ExportJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportJobWithDefaults() *ExportJob {
	this := ExportJob{}
	return &this
}

// GetId returns the Id field value
func (o *ExportJob) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExportJob) SetId(v string) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *ExportJob) GetCreated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetCreatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ExportJob) SetCreated(v int32) {
	o.Created = v
}

// GetFormat returns the Format field value
func (o *ExportJob) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *ExportJob) SetFormat(v string) {
	o.Format = v
}

// GetPercentage returns the Percentage field value
func (o *ExportJob) GetPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *ExportJob) SetPercentage(v int32) {
	o.Percentage = v
}

// GetStatus returns the Status field value
func (o *ExportJob) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ExportJob) SetStatus(v string) {
	o.Status = v
}

// GetExpires returns the Expires field value
func (o *ExportJob) GetExpires() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetExpiresOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expires, true
}

// SetExpires sets field value
func (o *ExportJob) SetExpires(v int32) {
	o.Expires = v
}

// GetLinks returns the Links field value
func (o *ExportJob) GetLinks() []ExportJobLinksInner {
	if o == nil {
		var ret []ExportJobLinksInner
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ExportJob) GetLinksOk() ([]ExportJobLinksInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *ExportJob) SetLinks(v []ExportJobLinksInner) {
	o.Links = v
}

func (o ExportJob) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created"] = o.Created
	toSerialize["format"] = o.Format
	toSerialize["percentage"] = o.Percentage
	toSerialize["status"] = o.Status
	toSerialize["expires"] = o.Expires
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *ExportJob) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created",
		"format",
		"percentage",
		"status",
		"expires",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExportJob := _ExportJob{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExportJob)

	if err != nil {
		return err
	}

	*o = ExportJob(varExportJob)

	return err
}

type NullableExportJob struct {
	value *ExportJob
	isSet bool
}

func (v NullableExportJob) Get() *ExportJob {
	return v.value
}

func (v *NullableExportJob) Set(val *ExportJob) {
	v.value = val
	v.isSet = true
}

func (v NullableExportJob) IsSet() bool {
	return v.isSet
}

func (v *NullableExportJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportJob(val *ExportJob) *NullableExportJob {
	return &NullableExportJob{value: val, isSet: true}
}

func (v NullableExportJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
