/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TargetParamsSetWebhook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetParamsSetWebhook{}

// TargetParamsSetWebhook The list of key values that are defined for target type **webhook***.
type TargetParamsSetWebhook struct {
	// The URL to the hook to send the notification to.
	Url string `json:"url"`
}

type _TargetParamsSetWebhook TargetParamsSetWebhook

// NewTargetParamsSetWebhook instantiates a new TargetParamsSetWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetParamsSetWebhook(url string) *TargetParamsSetWebhook {
	this := TargetParamsSetWebhook{}
	this.Url = url
	return &this
}

// NewTargetParamsSetWebhookWithDefaults instantiates a new TargetParamsSetWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetParamsSetWebhookWithDefaults() *TargetParamsSetWebhook {
	this := TargetParamsSetWebhook{}
	return &this
}

// GetUrl returns the Url field value
func (o *TargetParamsSetWebhook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TargetParamsSetWebhook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TargetParamsSetWebhook) SetUrl(v string) {
	o.Url = v
}

func (o TargetParamsSetWebhook) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetParamsSetWebhook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *TargetParamsSetWebhook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetParamsSetWebhook := _TargetParamsSetWebhook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetParamsSetWebhook)

	if err != nil {
		return err
	}

	*o = TargetParamsSetWebhook(varTargetParamsSetWebhook)

	return err
}

type NullableTargetParamsSetWebhook struct {
	value *TargetParamsSetWebhook
	isSet bool
}

func (v NullableTargetParamsSetWebhook) Get() *TargetParamsSetWebhook {
	return v.value
}

func (v *NullableTargetParamsSetWebhook) Set(val *TargetParamsSetWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetParamsSetWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetParamsSetWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetParamsSetWebhook(val *TargetParamsSetWebhook) *NullableTargetParamsSetWebhook {
	return &NullableTargetParamsSetWebhook{value: val, isSet: true}
}

func (v NullableTargetParamsSetWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetParamsSetWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
