/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PatchTagWithAnomalyAlertTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchTagWithAnomalyAlertTag{}

// PatchTagWithAnomalyAlertTag struct for PatchTagWithAnomalyAlertTag
type PatchTagWithAnomalyAlertTag struct {
	// The name of the detection rule.
	Name *string `json:"name,omitempty"`
	// The IDs of the logs that the detection rule operates on.
	Sources []SourcesIdArrayInner `json:"sources,omitempty"`
	// Always set to \"AlertNotify\".
	Type string `json:"type"`
	// Always set to \"AnomalyAlert\".
	SubType *string `json:"sub_type,omitempty"`
	// The description of the detection rule.
	Description *string `json:"description,omitempty"`
	// The notifications attached to the detection rule.
	Actions []CreateTagActionAnomaly `json:"actions,omitempty"`
	// A list of key-value pairs that may indicate some auxiliary information about the change detection rule.
	UserData       map[string]interface{} `json:"user_data,omitempty"`
	ScheduledQuery *CreateScheduledQuery  `json:"scheduled_query,omitempty"`
	// The percentage that defines when to trigger notifications. The percentage can be positive or negative. For example, if the percentage is set to -50, then notifications will be triggered when the query result for the time range defined by the `time_value` and `time_period` parameters is 50% smaller when compared to the same query over the time range defined by the `timeframe_value` and `timeframe_period` parameters.
	ThresholdValue *int32 `json:"threshold_value,omitempty"`
	// This ensures investigations are ordered by priority in Investigation Management. Must be >=0
	Priority *int32 `json:"priority,omitempty"`
}

type _PatchTagWithAnomalyAlertTag PatchTagWithAnomalyAlertTag

// NewPatchTagWithAnomalyAlertTag instantiates a new PatchTagWithAnomalyAlertTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchTagWithAnomalyAlertTag(type_ string) *PatchTagWithAnomalyAlertTag {
	this := PatchTagWithAnomalyAlertTag{}
	this.Type = type_
	return &this
}

// NewPatchTagWithAnomalyAlertTagWithDefaults instantiates a new PatchTagWithAnomalyAlertTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchTagWithAnomalyAlertTagWithDefaults() *PatchTagWithAnomalyAlertTag {
	this := PatchTagWithAnomalyAlertTag{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchTagWithAnomalyAlertTag) SetName(v string) {
	o.Name = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetSources() []SourcesIdArrayInner {
	if o == nil || IsNil(o.Sources) {
		var ret []SourcesIdArrayInner
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetSourcesOk() ([]SourcesIdArrayInner, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []SourcesIdArrayInner and assigns it to the Sources field.
func (o *PatchTagWithAnomalyAlertTag) SetSources(v []SourcesIdArrayInner) {
	o.Sources = v
}

// GetType returns the Type field value
func (o *PatchTagWithAnomalyAlertTag) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PatchTagWithAnomalyAlertTag) SetType(v string) {
	o.Type = v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetSubType() string {
	if o == nil || IsNil(o.SubType) {
		var ret string
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubType) {
		return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasSubType() bool {
	if o != nil && !IsNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given string and assigns it to the SubType field.
func (o *PatchTagWithAnomalyAlertTag) SetSubType(v string) {
	o.SubType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchTagWithAnomalyAlertTag) SetDescription(v string) {
	o.Description = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetActions() []CreateTagActionAnomaly {
	if o == nil || IsNil(o.Actions) {
		var ret []CreateTagActionAnomaly
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetActionsOk() ([]CreateTagActionAnomaly, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []CreateTagActionAnomaly and assigns it to the Actions field.
func (o *PatchTagWithAnomalyAlertTag) SetActions(v []CreateTagActionAnomaly) {
	o.Actions = v
}

// GetUserData returns the UserData field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetUserData() map[string]interface{} {
	if o == nil || IsNil(o.UserData) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetUserDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserData) {
		return map[string]interface{}{}, false
	}
	return o.UserData, true
}

// HasUserData returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasUserData() bool {
	if o != nil && !IsNil(o.UserData) {
		return true
	}

	return false
}

// SetUserData gets a reference to the given map[string]interface{} and assigns it to the UserData field.
func (o *PatchTagWithAnomalyAlertTag) SetUserData(v map[string]interface{}) {
	o.UserData = v
}

// GetScheduledQuery returns the ScheduledQuery field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetScheduledQuery() CreateScheduledQuery {
	if o == nil || IsNil(o.ScheduledQuery) {
		var ret CreateScheduledQuery
		return ret
	}
	return *o.ScheduledQuery
}

// GetScheduledQueryOk returns a tuple with the ScheduledQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetScheduledQueryOk() (*CreateScheduledQuery, bool) {
	if o == nil || IsNil(o.ScheduledQuery) {
		return nil, false
	}
	return o.ScheduledQuery, true
}

// HasScheduledQuery returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasScheduledQuery() bool {
	if o != nil && !IsNil(o.ScheduledQuery) {
		return true
	}

	return false
}

// SetScheduledQuery gets a reference to the given CreateScheduledQuery and assigns it to the ScheduledQuery field.
func (o *PatchTagWithAnomalyAlertTag) SetScheduledQuery(v CreateScheduledQuery) {
	o.ScheduledQuery = &v
}

// GetThresholdValue returns the ThresholdValue field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetThresholdValue() int32 {
	if o == nil || IsNil(o.ThresholdValue) {
		var ret int32
		return ret
	}
	return *o.ThresholdValue
}

// GetThresholdValueOk returns a tuple with the ThresholdValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetThresholdValueOk() (*int32, bool) {
	if o == nil || IsNil(o.ThresholdValue) {
		return nil, false
	}
	return o.ThresholdValue, true
}

// HasThresholdValue returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasThresholdValue() bool {
	if o != nil && !IsNil(o.ThresholdValue) {
		return true
	}

	return false
}

// SetThresholdValue gets a reference to the given int32 and assigns it to the ThresholdValue field.
func (o *PatchTagWithAnomalyAlertTag) SetThresholdValue(v int32) {
	o.ThresholdValue = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PatchTagWithAnomalyAlertTag) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchTagWithAnomalyAlertTag) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PatchTagWithAnomalyAlertTag) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *PatchTagWithAnomalyAlertTag) SetPriority(v int32) {
	o.Priority = &v
}

func (o PatchTagWithAnomalyAlertTag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchTagWithAnomalyAlertTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.SubType) {
		toSerialize["sub_type"] = o.SubType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.UserData) {
		toSerialize["user_data"] = o.UserData
	}
	if !IsNil(o.ScheduledQuery) {
		toSerialize["scheduled_query"] = o.ScheduledQuery
	}
	if !IsNil(o.ThresholdValue) {
		toSerialize["threshold_value"] = o.ThresholdValue
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

func (o *PatchTagWithAnomalyAlertTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchTagWithAnomalyAlertTag := _PatchTagWithAnomalyAlertTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatchTagWithAnomalyAlertTag)

	if err != nil {
		return err
	}

	*o = PatchTagWithAnomalyAlertTag(varPatchTagWithAnomalyAlertTag)

	return err
}

type NullablePatchTagWithAnomalyAlertTag struct {
	value *PatchTagWithAnomalyAlertTag
	isSet bool
}

func (v NullablePatchTagWithAnomalyAlertTag) Get() *PatchTagWithAnomalyAlertTag {
	return v.value
}

func (v *NullablePatchTagWithAnomalyAlertTag) Set(val *PatchTagWithAnomalyAlertTag) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchTagWithAnomalyAlertTag) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchTagWithAnomalyAlertTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchTagWithAnomalyAlertTag(val *PatchTagWithAnomalyAlertTag) *NullablePatchTagWithAnomalyAlertTag {
	return &NullablePatchTagWithAnomalyAlertTag{value: val, isSet: true}
}

func (v NullablePatchTagWithAnomalyAlertTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchTagWithAnomalyAlertTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
