/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventLiveTail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventLiveTail{}

// EventLiveTail struct for EventLiveTail
type EventLiveTail struct {
	// the UUIDs of all labels of the log entry (and a link to **_/management/labels/{label_id}**).
	Labels []LabelsInner `json:"labels,omitempty"`
	// The UNIX timestamp in milliseconds, of when the log entry was received.
	Timestamp int32 `json:"timestamp"`
	// The sequence number of the log entry (a unique identifier used to distinguish between log entries received in the same millisecond).
	SequenceNumber int32 `json:"sequence_number"`
	// The key of the log that the entry belongs to.
	LogId string `json:"log_id"`
	// The log entry itself.
	Message string `json:"message"`
	// The sequence number as a string, rather than as an integer.
	SequenceNumberStr string `json:"sequence_number_str"`
}

type _EventLiveTail EventLiveTail

// NewEventLiveTail instantiates a new EventLiveTail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventLiveTail(timestamp int32, sequenceNumber int32, logId string, message string, sequenceNumberStr string) *EventLiveTail {
	this := EventLiveTail{}
	this.Timestamp = timestamp
	this.SequenceNumber = sequenceNumber
	this.LogId = logId
	this.Message = message
	this.SequenceNumberStr = sequenceNumberStr
	return &this
}

// NewEventLiveTailWithDefaults instantiates a new EventLiveTail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventLiveTailWithDefaults() *EventLiveTail {
	this := EventLiveTail{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *EventLiveTail) GetLabels() []LabelsInner {
	if o == nil || IsNil(o.Labels) {
		var ret []LabelsInner
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLiveTail) GetLabelsOk() ([]LabelsInner, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *EventLiveTail) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []LabelsInner and assigns it to the Labels field.
func (o *EventLiveTail) SetLabels(v []LabelsInner) {
	o.Labels = v
}

// GetTimestamp returns the Timestamp field value
func (o *EventLiveTail) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *EventLiveTail) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *EventLiveTail) SetTimestamp(v int32) {
	o.Timestamp = v
}

// GetSequenceNumber returns the SequenceNumber field value
func (o *EventLiveTail) GetSequenceNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value
// and a boolean to check if the value has been set.
func (o *EventLiveTail) GetSequenceNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SequenceNumber, true
}

// SetSequenceNumber sets field value
func (o *EventLiveTail) SetSequenceNumber(v int32) {
	o.SequenceNumber = v
}

// GetLogId returns the LogId field value
func (o *EventLiveTail) GetLogId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogId
}

// GetLogIdOk returns a tuple with the LogId field value
// and a boolean to check if the value has been set.
func (o *EventLiveTail) GetLogIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogId, true
}

// SetLogId sets field value
func (o *EventLiveTail) SetLogId(v string) {
	o.LogId = v
}

// GetMessage returns the Message field value
func (o *EventLiveTail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *EventLiveTail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *EventLiveTail) SetMessage(v string) {
	o.Message = v
}

// GetSequenceNumberStr returns the SequenceNumberStr field value
func (o *EventLiveTail) GetSequenceNumberStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SequenceNumberStr
}

// GetSequenceNumberStrOk returns a tuple with the SequenceNumberStr field value
// and a boolean to check if the value has been set.
func (o *EventLiveTail) GetSequenceNumberStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SequenceNumberStr, true
}

// SetSequenceNumberStr sets field value
func (o *EventLiveTail) SetSequenceNumberStr(v string) {
	o.SequenceNumberStr = v
}

func (o EventLiveTail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventLiveTail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["sequence_number"] = o.SequenceNumber
	toSerialize["log_id"] = o.LogId
	toSerialize["message"] = o.Message
	toSerialize["sequence_number_str"] = o.SequenceNumberStr
	return toSerialize, nil
}

func (o *EventLiveTail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"sequence_number",
		"log_id",
		"message",
		"sequence_number_str",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventLiveTail := _EventLiveTail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventLiveTail)

	if err != nil {
		return err
	}

	*o = EventLiveTail(varEventLiveTail)

	return err
}

type NullableEventLiveTail struct {
	value *EventLiveTail
	isSet bool
}

func (v NullableEventLiveTail) Get() *EventLiveTail {
	return v.value
}

func (v *NullableEventLiveTail) Set(val *EventLiveTail) {
	v.value = val
	v.isSet = true
}

func (v NullableEventLiveTail) IsSet() bool {
	return v.isSet
}

func (v *NullableEventLiveTail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventLiveTail(val *EventLiveTail) *NullableEventLiveTail {
	return &NullableEventLiveTail{value: val, isSet: true}
}

func (v NullableEventLiveTail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventLiveTail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
