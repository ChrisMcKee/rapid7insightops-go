/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PutManagementTagByIdRequest - struct for PutManagementTagByIdRequest
type PutManagementTagByIdRequest struct {
	CreateOrPutTagInactivityAlert *CreateOrPutTagInactivityAlert
	PutBasicTag                   *PutBasicTag
	PutTagAnomalyAlert            *PutTagAnomalyAlert
}

// CreateOrPutTagInactivityAlertAsPutManagementTagByIdRequest is a convenience function that returns CreateOrPutTagInactivityAlert wrapped in PutManagementTagByIdRequest
func CreateOrPutTagInactivityAlertAsPutManagementTagByIdRequest(v *CreateOrPutTagInactivityAlert) PutManagementTagByIdRequest {
	return PutManagementTagByIdRequest{
		CreateOrPutTagInactivityAlert: v,
	}
}

// PutBasicTagAsPutManagementTagByIdRequest is a convenience function that returns PutBasicTag wrapped in PutManagementTagByIdRequest
func PutBasicTagAsPutManagementTagByIdRequest(v *PutBasicTag) PutManagementTagByIdRequest {
	return PutManagementTagByIdRequest{
		PutBasicTag: v,
	}
}

// PutTagAnomalyAlertAsPutManagementTagByIdRequest is a convenience function that returns PutTagAnomalyAlert wrapped in PutManagementTagByIdRequest
func PutTagAnomalyAlertAsPutManagementTagByIdRequest(v *PutTagAnomalyAlert) PutManagementTagByIdRequest {
	return PutManagementTagByIdRequest{
		PutTagAnomalyAlert: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PutManagementTagByIdRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateOrPutTagInactivityAlert
	err = newStrictDecoder(data).Decode(&dst.CreateOrPutTagInactivityAlert)
	if err == nil {
		jsonCreateOrPutTagInactivityAlert, _ := json.Marshal(dst.CreateOrPutTagInactivityAlert)
		if string(jsonCreateOrPutTagInactivityAlert) == "{}" { // empty struct
			dst.CreateOrPutTagInactivityAlert = nil
		} else {
			if err = validator.Validate(dst.CreateOrPutTagInactivityAlert); err != nil {
				dst.CreateOrPutTagInactivityAlert = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateOrPutTagInactivityAlert = nil
	}

	// try to unmarshal data into PutBasicTag
	err = newStrictDecoder(data).Decode(&dst.PutBasicTag)
	if err == nil {
		jsonPutBasicTag, _ := json.Marshal(dst.PutBasicTag)
		if string(jsonPutBasicTag) == "{}" { // empty struct
			dst.PutBasicTag = nil
		} else {
			if err = validator.Validate(dst.PutBasicTag); err != nil {
				dst.PutBasicTag = nil
			} else {
				match++
			}
		}
	} else {
		dst.PutBasicTag = nil
	}

	// try to unmarshal data into PutTagAnomalyAlert
	err = newStrictDecoder(data).Decode(&dst.PutTagAnomalyAlert)
	if err == nil {
		jsonPutTagAnomalyAlert, _ := json.Marshal(dst.PutTagAnomalyAlert)
		if string(jsonPutTagAnomalyAlert) == "{}" { // empty struct
			dst.PutTagAnomalyAlert = nil
		} else {
			if err = validator.Validate(dst.PutTagAnomalyAlert); err != nil {
				dst.PutTagAnomalyAlert = nil
			} else {
				match++
			}
		}
	} else {
		dst.PutTagAnomalyAlert = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateOrPutTagInactivityAlert = nil
		dst.PutBasicTag = nil
		dst.PutTagAnomalyAlert = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PutManagementTagByIdRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PutManagementTagByIdRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PutManagementTagByIdRequest) MarshalJSON() ([]byte, error) {
	if src.CreateOrPutTagInactivityAlert != nil {
		return json.Marshal(&src.CreateOrPutTagInactivityAlert)
	}

	if src.PutBasicTag != nil {
		return json.Marshal(&src.PutBasicTag)
	}

	if src.PutTagAnomalyAlert != nil {
		return json.Marshal(&src.PutTagAnomalyAlert)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PutManagementTagByIdRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateOrPutTagInactivityAlert != nil {
		return obj.CreateOrPutTagInactivityAlert
	}

	if obj.PutBasicTag != nil {
		return obj.PutBasicTag
	}

	if obj.PutTagAnomalyAlert != nil {
		return obj.PutTagAnomalyAlert
	}

	// all schemas are nil
	return nil
}

type NullablePutManagementTagByIdRequest struct {
	value *PutManagementTagByIdRequest
	isSet bool
}

func (v NullablePutManagementTagByIdRequest) Get() *PutManagementTagByIdRequest {
	return v.value
}

func (v *NullablePutManagementTagByIdRequest) Set(val *PutManagementTagByIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutManagementTagByIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutManagementTagByIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutManagementTagByIdRequest(val *PutManagementTagByIdRequest) *NullablePutManagementTagByIdRequest {
	return &NullablePutManagementTagByIdRequest{value: val, isSet: true}
}

func (v NullablePutManagementTagByIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutManagementTagByIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
