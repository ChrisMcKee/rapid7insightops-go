/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the S3ArchivingSetupS3setup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3ArchivingSetupS3setup{}

// S3ArchivingSetupS3setup struct for S3ArchivingSetupS3setup
type S3ArchivingSetupS3setup struct {
	// The unique id of the S3 Archiving Setup.
	Id string `json:"id"`
	// The name of the AWS S3 Bucket.
	BucketName string `json:"bucket_name"`
	// Boolean indicating whether the S3 setup is enabled.
	Enabled bool `json:"enabled"`
	// The type of compression used for archiving. This is either \"GZIP\" or \"BZIP2\".
	Compression string `json:"compression"`
}

type _S3ArchivingSetupS3setup S3ArchivingSetupS3setup

// NewS3ArchivingSetupS3setup instantiates a new S3ArchivingSetupS3setup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3ArchivingSetupS3setup(id string, bucketName string, enabled bool, compression string) *S3ArchivingSetupS3setup {
	this := S3ArchivingSetupS3setup{}
	this.Id = id
	this.BucketName = bucketName
	this.Enabled = enabled
	this.Compression = compression
	return &this
}

// NewS3ArchivingSetupS3setupWithDefaults instantiates a new S3ArchivingSetupS3setup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ArchivingSetupS3setupWithDefaults() *S3ArchivingSetupS3setup {
	this := S3ArchivingSetupS3setup{}
	return &this
}

// GetId returns the Id field value
func (o *S3ArchivingSetupS3setup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *S3ArchivingSetupS3setup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *S3ArchivingSetupS3setup) SetId(v string) {
	o.Id = v
}

// GetBucketName returns the BucketName field value
func (o *S3ArchivingSetupS3setup) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *S3ArchivingSetupS3setup) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *S3ArchivingSetupS3setup) SetBucketName(v string) {
	o.BucketName = v
}

// GetEnabled returns the Enabled field value
func (o *S3ArchivingSetupS3setup) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *S3ArchivingSetupS3setup) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *S3ArchivingSetupS3setup) SetEnabled(v bool) {
	o.Enabled = v
}

// GetCompression returns the Compression field value
func (o *S3ArchivingSetupS3setup) GetCompression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value
// and a boolean to check if the value has been set.
func (o *S3ArchivingSetupS3setup) GetCompressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compression, true
}

// SetCompression sets field value
func (o *S3ArchivingSetupS3setup) SetCompression(v string) {
	o.Compression = v
}

func (o S3ArchivingSetupS3setup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3ArchivingSetupS3setup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["enabled"] = o.Enabled
	toSerialize["compression"] = o.Compression
	return toSerialize, nil
}

func (o *S3ArchivingSetupS3setup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"bucket_name",
		"enabled",
		"compression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3ArchivingSetupS3setup := _S3ArchivingSetupS3setup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3ArchivingSetupS3setup)

	if err != nil {
		return err
	}

	*o = S3ArchivingSetupS3setup(varS3ArchivingSetupS3setup)

	return err
}

type NullableS3ArchivingSetupS3setup struct {
	value *S3ArchivingSetupS3setup
	isSet bool
}

func (v NullableS3ArchivingSetupS3setup) Get() *S3ArchivingSetupS3setup {
	return v.value
}

func (v *NullableS3ArchivingSetupS3setup) Set(val *S3ArchivingSetupS3setup) {
	v.value = val
	v.isSet = true
}

func (v NullableS3ArchivingSetupS3setup) IsSet() bool {
	return v.isSet
}

func (v *NullableS3ArchivingSetupS3setup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3ArchivingSetupS3setup(val *S3ArchivingSetupS3setup) *NullableS3ArchivingSetupS3setup {
	return &NullableS3ArchivingSetupS3setup{value: val, isSet: true}
}

func (v NullableS3ArchivingSetupS3setup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3ArchivingSetupS3setup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
