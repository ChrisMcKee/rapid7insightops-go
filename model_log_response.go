/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LogResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogResponse{}

// LogResponse struct for LogResponse
type LogResponse struct {
	// The UUID of the log.
	Id string `json:"id"`
	// The name of the log.
	Name interface{} `json:"name"`
	// The log token(s) used for writing to the log. This only applies to token type logs (view `source_type` parameter).
	Tokens []string `json:"tokens"`
	// Structures are internal entities which may apply some additional processing to log entries written to this this log.
	Structures []string `json:"structures"`
	// The IP address that the Log Search system receives log entries from. This only applies to syslog type logs (view the `source_type` parameter).
	IpAddress *string `json:"ip_address,omitempty"`
	// The information on each log set that this log is part of.
	LogsetsInfo []MemberInfoInner `json:"logsets_info"`
	// A list of key-values pairs that may indicate some auxiliary information about the log.
	UserData map[string]string `json:"user_data"`
	// A categorization of logs which defines how log entries are received by a server. * Syslog type logs are associated with an IP address and a port (the values appear in the `user_data` field). Any log entries received by the server on that port and from that IP address will belong to that log. * Token type logs are associated with a log token. Any log entries received by the server on one of the [standard ports](https://docs.rapid7.com/insightops/token-tcp) containing that log token will belong to that log (with the log token removed from the log entry). * Internal type logs use internal mechanisms to receive log entries, for example any of the logs in the Internal Logs log set.
	SourceType string `json:"source_type"`
	// The Rapid7 Resource Name (RRN) of the log. The RRN is a unique identifier across the Rapid7 Platform.
	Rrn string `json:"rrn"`
	// The seed used to generate the log token if the log's `source_type` is `token`.
	TokenSeed       interface{}         `json:"token_seed"`
	RetentionPeriod RetentionPeriodEnum `json:"retention_period"`
	Links           []LinksInner        `json:"links"`
}

type _LogResponse LogResponse

// NewLogResponse instantiates a new LogResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogResponse(id string, name interface{}, tokens []string, structures []string, logsetsInfo []MemberInfoInner, userData map[string]string, sourceType string, rrn string, tokenSeed interface{}, retentionPeriod RetentionPeriodEnum, links []LinksInner) *LogResponse {
	this := LogResponse{}
	this.Id = id
	this.Name = name
	this.Tokens = tokens
	this.Structures = structures
	this.LogsetsInfo = logsetsInfo
	this.UserData = userData
	this.SourceType = sourceType
	this.Rrn = rrn
	this.TokenSeed = tokenSeed
	this.RetentionPeriod = retentionPeriod
	this.Links = links
	return &this
}

// NewLogResponseWithDefaults instantiates a new LogResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogResponseWithDefaults() *LogResponse {
	this := LogResponse{}
	var sourceType string = "token"
	this.SourceType = sourceType
	return &this
}

// GetId returns the Id field value
func (o *LogResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *LogResponse) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogResponse) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogResponse) SetName(v interface{}) {
	o.Name = v
}

// GetTokens returns the Tokens field value
func (o *LogResponse) GetTokens() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetTokensOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tokens, true
}

// SetTokens sets field value
func (o *LogResponse) SetTokens(v []string) {
	o.Tokens = v
}

// GetStructures returns the Structures field value
func (o *LogResponse) GetStructures() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Structures
}

// GetStructuresOk returns a tuple with the Structures field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetStructuresOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Structures, true
}

// SetStructures sets field value
func (o *LogResponse) SetStructures(v []string) {
	o.Structures = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *LogResponse) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogResponse) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *LogResponse) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *LogResponse) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLogsetsInfo returns the LogsetsInfo field value
func (o *LogResponse) GetLogsetsInfo() []MemberInfoInner {
	if o == nil {
		var ret []MemberInfoInner
		return ret
	}

	return o.LogsetsInfo
}

// GetLogsetsInfoOk returns a tuple with the LogsetsInfo field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetLogsetsInfoOk() ([]MemberInfoInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogsetsInfo, true
}

// SetLogsetsInfo sets field value
func (o *LogResponse) SetLogsetsInfo(v []MemberInfoInner) {
	o.LogsetsInfo = v
}

// GetUserData returns the UserData field value
func (o *LogResponse) GetUserData() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetUserDataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserData, true
}

// SetUserData sets field value
func (o *LogResponse) SetUserData(v map[string]string) {
	o.UserData = v
}

// GetSourceType returns the SourceType field value
func (o *LogResponse) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *LogResponse) SetSourceType(v string) {
	o.SourceType = v
}

// GetRrn returns the Rrn field value
func (o *LogResponse) GetRrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rrn
}

// GetRrnOk returns a tuple with the Rrn field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetRrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rrn, true
}

// SetRrn sets field value
func (o *LogResponse) SetRrn(v string) {
	o.Rrn = v
}

// GetTokenSeed returns the TokenSeed field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *LogResponse) GetTokenSeed() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.TokenSeed
}

// GetTokenSeedOk returns a tuple with the TokenSeed field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogResponse) GetTokenSeedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TokenSeed) {
		return nil, false
	}
	return &o.TokenSeed, true
}

// SetTokenSeed sets field value
func (o *LogResponse) SetTokenSeed(v interface{}) {
	o.TokenSeed = v
}

// GetRetentionPeriod returns the RetentionPeriod field value
func (o *LogResponse) GetRetentionPeriod() RetentionPeriodEnum {
	if o == nil {
		var ret RetentionPeriodEnum
		return ret
	}

	return o.RetentionPeriod
}

// GetRetentionPeriodOk returns a tuple with the RetentionPeriod field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetRetentionPeriodOk() (*RetentionPeriodEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetentionPeriod, true
}

// SetRetentionPeriod sets field value
func (o *LogResponse) SetRetentionPeriod(v RetentionPeriodEnum) {
	o.RetentionPeriod = v
}

// GetLinks returns the Links field value
func (o *LogResponse) GetLinks() []LinksInner {
	if o == nil {
		var ret []LinksInner
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *LogResponse) GetLinksOk() ([]LinksInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *LogResponse) SetLinks(v []LinksInner) {
	o.Links = v
}

func (o LogResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	toSerialize["tokens"] = o.Tokens
	toSerialize["structures"] = o.Structures
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	toSerialize["logsets_info"] = o.LogsetsInfo
	toSerialize["user_data"] = o.UserData
	toSerialize["source_type"] = o.SourceType
	toSerialize["rrn"] = o.Rrn
	if o.TokenSeed != nil {
		toSerialize["token_seed"] = o.TokenSeed
	}
	toSerialize["retention_period"] = o.RetentionPeriod
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *LogResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"tokens",
		"structures",
		"logsets_info",
		"user_data",
		"source_type",
		"rrn",
		"token_seed",
		"retention_period",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogResponse := _LogResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogResponse)

	if err != nil {
		return err
	}

	*o = LogResponse(varLogResponse)

	return err
}

type NullableLogResponse struct {
	value *LogResponse
	isSet bool
}

func (v NullableLogResponse) Get() *LogResponse {
	return v.value
}

func (v *NullableLogResponse) Set(val *LogResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogResponse(val *LogResponse) *NullableLogResponse {
	return &NullableLogResponse{value: val, isSet: true}
}

func (v NullableLogResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
