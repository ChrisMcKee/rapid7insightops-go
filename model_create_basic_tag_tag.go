/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateBasicTagTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBasicTagTag{}

// CreateBasicTagTag struct for CreateBasicTagTag
type CreateBasicTagTag struct {
	// The name of the detection rule.
	Name string `json:"name"`
	// Use the `leql` parameter instead of this parameter.
	// Deprecated
	Patterns []string `json:"patterns,omitempty"`
	// The IDs of the logs that the detection rule operates on.
	Sources []SourcesIdArrayInner `json:"sources"`
	// Always set to \"Alert\".
	Type *string `json:"type,omitempty"`
	// The description of the detection rule.
	Description *string `json:"description,omitempty"`
	// The notifications attached to the detection rule.
	Actions []CreateTagAction `json:"actions,omitempty"`
	// The labels attached to the detection rule.
	Labels []LabelResponse `json:"labels,omitempty"`
	// A list of key-value pairs that may indicate some auxiliary information about the change detection rule.
	UserData map[string]interface{} `json:"user_data,omitempty"`
	Leql     BasicLeql              `json:"leql"`
	// This ensures investigations are ordered by priority in Investigation Management. Must be >=0
	Priority *int32 `json:"priority,omitempty"`
}

type _CreateBasicTagTag CreateBasicTagTag

// NewCreateBasicTagTag instantiates a new CreateBasicTagTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBasicTagTag(name string, sources []SourcesIdArrayInner, leql BasicLeql) *CreateBasicTagTag {
	this := CreateBasicTagTag{}
	this.Name = name
	this.Sources = sources
	this.Leql = leql
	return &this
}

// NewCreateBasicTagTagWithDefaults instantiates a new CreateBasicTagTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBasicTagTagWithDefaults() *CreateBasicTagTag {
	this := CreateBasicTagTag{}
	return &this
}

// GetName returns the Name field value
func (o *CreateBasicTagTag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateBasicTagTag) SetName(v string) {
	o.Name = v
}

// GetPatterns returns the Patterns field value if set, zero value otherwise.
// Deprecated
func (o *CreateBasicTagTag) GetPatterns() []string {
	if o == nil || IsNil(o.Patterns) {
		var ret []string
		return ret
	}
	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateBasicTagTag) GetPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.Patterns) {
		return nil, false
	}
	return o.Patterns, true
}

// HasPatterns returns a boolean if a field has been set.
func (o *CreateBasicTagTag) HasPatterns() bool {
	if o != nil && !IsNil(o.Patterns) {
		return true
	}

	return false
}

// SetPatterns gets a reference to the given []string and assigns it to the Patterns field.
// Deprecated
func (o *CreateBasicTagTag) SetPatterns(v []string) {
	o.Patterns = v
}

// GetSources returns the Sources field value
func (o *CreateBasicTagTag) GetSources() []SourcesIdArrayInner {
	if o == nil {
		var ret []SourcesIdArrayInner
		return ret
	}

	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetSourcesOk() ([]SourcesIdArrayInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sources, true
}

// SetSources sets field value
func (o *CreateBasicTagTag) SetSources(v []SourcesIdArrayInner) {
	o.Sources = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateBasicTagTag) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateBasicTagTag) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateBasicTagTag) SetType(v string) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateBasicTagTag) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateBasicTagTag) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateBasicTagTag) SetDescription(v string) {
	o.Description = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *CreateBasicTagTag) GetActions() []CreateTagAction {
	if o == nil || IsNil(o.Actions) {
		var ret []CreateTagAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetActionsOk() ([]CreateTagAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *CreateBasicTagTag) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []CreateTagAction and assigns it to the Actions field.
func (o *CreateBasicTagTag) SetActions(v []CreateTagAction) {
	o.Actions = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateBasicTagTag) GetLabels() []LabelResponse {
	if o == nil || IsNil(o.Labels) {
		var ret []LabelResponse
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetLabelsOk() ([]LabelResponse, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateBasicTagTag) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []LabelResponse and assigns it to the Labels field.
func (o *CreateBasicTagTag) SetLabels(v []LabelResponse) {
	o.Labels = v
}

// GetUserData returns the UserData field value if set, zero value otherwise.
func (o *CreateBasicTagTag) GetUserData() map[string]interface{} {
	if o == nil || IsNil(o.UserData) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetUserDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserData) {
		return map[string]interface{}{}, false
	}
	return o.UserData, true
}

// HasUserData returns a boolean if a field has been set.
func (o *CreateBasicTagTag) HasUserData() bool {
	if o != nil && !IsNil(o.UserData) {
		return true
	}

	return false
}

// SetUserData gets a reference to the given map[string]interface{} and assigns it to the UserData field.
func (o *CreateBasicTagTag) SetUserData(v map[string]interface{}) {
	o.UserData = v
}

// GetLeql returns the Leql field value
func (o *CreateBasicTagTag) GetLeql() BasicLeql {
	if o == nil {
		var ret BasicLeql
		return ret
	}

	return o.Leql
}

// GetLeqlOk returns a tuple with the Leql field value
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetLeqlOk() (*BasicLeql, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Leql, true
}

// SetLeql sets field value
func (o *CreateBasicTagTag) SetLeql(v BasicLeql) {
	o.Leql = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *CreateBasicTagTag) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasicTagTag) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *CreateBasicTagTag) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *CreateBasicTagTag) SetPriority(v int32) {
	o.Priority = &v
}

func (o CreateBasicTagTag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBasicTagTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Patterns) {
		toSerialize["patterns"] = o.Patterns
	}
	toSerialize["sources"] = o.Sources
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.UserData) {
		toSerialize["user_data"] = o.UserData
	}
	toSerialize["leql"] = o.Leql
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

func (o *CreateBasicTagTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sources",
		"leql",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBasicTagTag := _CreateBasicTagTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateBasicTagTag)

	if err != nil {
		return err
	}

	*o = CreateBasicTagTag(varCreateBasicTagTag)

	return err
}

type NullableCreateBasicTagTag struct {
	value *CreateBasicTagTag
	isSet bool
}

func (v NullableCreateBasicTagTag) Get() *CreateBasicTagTag {
	return v.value
}

func (v *NullableCreateBasicTagTag) Set(val *CreateBasicTagTag) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBasicTagTag) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBasicTagTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBasicTagTag(val *CreateBasicTagTag) *NullableCreateBasicTagTag {
	return &NullableCreateBasicTagTag{value: val, isSet: true}
}

func (v NullableCreateBasicTagTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBasicTagTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
