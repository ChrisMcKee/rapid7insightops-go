/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
	"fmt"
)

// RetentionPeriodEnum the model 'RetentionPeriodEnum'
type RetentionPeriodEnum string

// List of retention_period_enum
const (
	_1W       RetentionPeriodEnum = "1w"
	_2W       RetentionPeriodEnum = "2w"
	_1M       RetentionPeriodEnum = "1m"
	_2M       RetentionPeriodEnum = "2m"
	_6M       RetentionPeriodEnum = "6m"
	_1Y       RetentionPeriodEnum = "1y"
	_2Y       RetentionPeriodEnum = "2y"
	UNLIMITED RetentionPeriodEnum = "unlimited"
	DEFAULT   RetentionPeriodEnum = "default"
)

// All allowed values of RetentionPeriodEnum enum
var AllowedRetentionPeriodEnumEnumValues = []RetentionPeriodEnum{
	"1w",
	"2w",
	"1m",
	"2m",
	"6m",
	"1y",
	"2y",
	"unlimited",
	"default",
}

func (v *RetentionPeriodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RetentionPeriodEnum(value)
	for _, existing := range AllowedRetentionPeriodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RetentionPeriodEnum", value)
}

// NewRetentionPeriodEnumFromValue returns a pointer to a valid RetentionPeriodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRetentionPeriodEnumFromValue(v string) (*RetentionPeriodEnum, error) {
	ev := RetentionPeriodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RetentionPeriodEnum: valid values are %v", v, AllowedRetentionPeriodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RetentionPeriodEnum) IsValid() bool {
	for _, existing := range AllowedRetentionPeriodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to retention_period_enum value
func (v RetentionPeriodEnum) Ptr() *RetentionPeriodEnum {
	return &v
}

type NullableRetentionPeriodEnum struct {
	value *RetentionPeriodEnum
	isSet bool
}

func (v NullableRetentionPeriodEnum) Get() *RetentionPeriodEnum {
	return v.value
}

func (v *NullableRetentionPeriodEnum) Set(val *RetentionPeriodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRetentionPeriodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRetentionPeriodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetentionPeriodEnum(val *RetentionPeriodEnum) *NullableRetentionPeriodEnum {
	return &NullableRetentionPeriodEnum{value: val, isSet: true}
}

func (v NullableRetentionPeriodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetentionPeriodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
