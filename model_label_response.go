/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LabelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelResponse{}

// LabelResponse struct for LabelResponse
type LabelResponse struct {
	// The id of the label.
	Id string `json:"id"`
	// A property which exists for legacy reasons and is no longer used for anything.
	Sn int32 `json:"sn"`
	// The name of the label.
	Name string `json:"name"`
	// The color of the label in HEX code.
	Color string `json:"color"`
	// When set to true, the label is read-only and cannot be modified.
	Reserved bool `json:"reserved"`
}

type _LabelResponse LabelResponse

// NewLabelResponse instantiates a new LabelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelResponse(id string, sn int32, name string, color string, reserved bool) *LabelResponse {
	this := LabelResponse{}
	this.Id = id
	this.Sn = sn
	this.Name = name
	this.Color = color
	this.Reserved = reserved
	return &this
}

// NewLabelResponseWithDefaults instantiates a new LabelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelResponseWithDefaults() *LabelResponse {
	this := LabelResponse{}
	return &this
}

// GetId returns the Id field value
func (o *LabelResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LabelResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LabelResponse) SetId(v string) {
	o.Id = v
}

// GetSn returns the Sn field value
func (o *LabelResponse) GetSn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sn
}

// GetSnOk returns a tuple with the Sn field value
// and a boolean to check if the value has been set.
func (o *LabelResponse) GetSnOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sn, true
}

// SetSn sets field value
func (o *LabelResponse) SetSn(v int32) {
	o.Sn = v
}

// GetName returns the Name field value
func (o *LabelResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LabelResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LabelResponse) SetName(v string) {
	o.Name = v
}

// GetColor returns the Color field value
func (o *LabelResponse) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *LabelResponse) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *LabelResponse) SetColor(v string) {
	o.Color = v
}

// GetReserved returns the Reserved field value
func (o *LabelResponse) GetReserved() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value
// and a boolean to check if the value has been set.
func (o *LabelResponse) GetReservedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reserved, true
}

// SetReserved sets field value
func (o *LabelResponse) SetReserved(v bool) {
	o.Reserved = v
}

func (o LabelResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["sn"] = o.Sn
	toSerialize["name"] = o.Name
	toSerialize["color"] = o.Color
	toSerialize["reserved"] = o.Reserved
	return toSerialize, nil
}

func (o *LabelResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"sn",
		"name",
		"color",
		"reserved",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLabelResponse := _LabelResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLabelResponse)

	if err != nil {
		return err
	}

	*o = LabelResponse(varLabelResponse)

	return err
}

type NullableLabelResponse struct {
	value *LabelResponse
	isSet bool
}

func (v NullableLabelResponse) Get() *LabelResponse {
	return v.value
}

func (v *NullableLabelResponse) Set(val *LabelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelResponse(val *LabelResponse) *NullableLabelResponse {
	return &NullableLabelResponse{value: val, isSet: true}
}

func (v NullableLabelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
