/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LogsetInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogsetInfo{}

// LogsetInfo struct for LogsetInfo
type LogsetInfo struct {
	// The UUID of the log set.
	Id string `json:"id"`
	// The name of the log set.
	Name interface{} `json:"name"`
	// The description of the log set.
	Description string `json:"description"`
	// A list of key-value pairs that may indicate some auxiliary information about the log set.
	UserData map[string]interface{} `json:"user_data"`
	// Information on each log that this log set contains.
	LogsInfo []MemberInfoLogsetInner `json:"logs_info"`
	// The Rapid7 Resource Name (RRN) of the log set. The RRN is a unique identifier across the Rapid7 Platform.
	Rrn interface{} `json:"rrn"`
}

type _LogsetInfo LogsetInfo

// NewLogsetInfo instantiates a new LogsetInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogsetInfo(id string, name interface{}, description string, userData map[string]interface{}, logsInfo []MemberInfoLogsetInner, rrn interface{}) *LogsetInfo {
	this := LogsetInfo{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.UserData = userData
	this.LogsInfo = logsInfo
	this.Rrn = rrn
	return &this
}

// NewLogsetInfoWithDefaults instantiates a new LogsetInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogsetInfoWithDefaults() *LogsetInfo {
	this := LogsetInfo{}
	return &this
}

// GetId returns the Id field value
func (o *LogsetInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogsetInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogsetInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *LogsetInfo) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogsetInfo) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogsetInfo) SetName(v interface{}) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *LogsetInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *LogsetInfo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *LogsetInfo) SetDescription(v string) {
	o.Description = v
}

// GetUserData returns the UserData field value
func (o *LogsetInfo) GetUserData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value
// and a boolean to check if the value has been set.
func (o *LogsetInfo) GetUserDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.UserData, true
}

// SetUserData sets field value
func (o *LogsetInfo) SetUserData(v map[string]interface{}) {
	o.UserData = v
}

// GetLogsInfo returns the LogsInfo field value
func (o *LogsetInfo) GetLogsInfo() []MemberInfoLogsetInner {
	if o == nil {
		var ret []MemberInfoLogsetInner
		return ret
	}

	return o.LogsInfo
}

// GetLogsInfoOk returns a tuple with the LogsInfo field value
// and a boolean to check if the value has been set.
func (o *LogsetInfo) GetLogsInfoOk() ([]MemberInfoLogsetInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogsInfo, true
}

// SetLogsInfo sets field value
func (o *LogsetInfo) SetLogsInfo(v []MemberInfoLogsetInner) {
	o.LogsInfo = v
}

// GetRrn returns the Rrn field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *LogsetInfo) GetRrn() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Rrn
}

// GetRrnOk returns a tuple with the Rrn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogsetInfo) GetRrnOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Rrn) {
		return nil, false
	}
	return &o.Rrn, true
}

// SetRrn sets field value
func (o *LogsetInfo) SetRrn(v interface{}) {
	o.Rrn = v
}

func (o LogsetInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogsetInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	toSerialize["description"] = o.Description
	toSerialize["user_data"] = o.UserData
	toSerialize["logs_info"] = o.LogsInfo
	if o.Rrn != nil {
		toSerialize["rrn"] = o.Rrn
	}
	return toSerialize, nil
}

func (o *LogsetInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"user_data",
		"logs_info",
		"rrn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogsetInfo := _LogsetInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogsetInfo)

	if err != nil {
		return err
	}

	*o = LogsetInfo(varLogsetInfo)

	return err
}

type NullableLogsetInfo struct {
	value *LogsetInfo
	isSet bool
}

func (v NullableLogsetInfo) Get() *LogsetInfo {
	return v.value
}

func (v *NullableLogsetInfo) Set(val *LogsetInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsetInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsetInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsetInfo(val *LogsetInfo) *NullableLogsetInfo {
	return &NullableLogsetInfo{value: val, isSet: true}
}

func (v NullableLogsetInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsetInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
