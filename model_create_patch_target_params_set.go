/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// CreatePatchTargetParamsSet - The list of key values that are defined depending on the target type.
type CreatePatchTargetParamsSet struct {
	TargetParamsSetIconworkflow *TargetParamsSetIconworkflow
	TargetParamsSetMailto       *TargetParamsSetMailto
	TargetParamsSetPagerduty    *TargetParamsSetPagerduty
	TargetParamsSetSlack        *TargetParamsSetSlack
	TargetParamsSetSqs          *TargetParamsSetSqs
	TargetParamsSetWebhook      *TargetParamsSetWebhook
}

// TargetParamsSetIconworkflowAsCreatePatchTargetParamsSet is a convenience function that returns TargetParamsSetIconworkflow wrapped in CreatePatchTargetParamsSet
func TargetParamsSetIconworkflowAsCreatePatchTargetParamsSet(v *TargetParamsSetIconworkflow) CreatePatchTargetParamsSet {
	return CreatePatchTargetParamsSet{
		TargetParamsSetIconworkflow: v,
	}
}

// TargetParamsSetMailtoAsCreatePatchTargetParamsSet is a convenience function that returns TargetParamsSetMailto wrapped in CreatePatchTargetParamsSet
func TargetParamsSetMailtoAsCreatePatchTargetParamsSet(v *TargetParamsSetMailto) CreatePatchTargetParamsSet {
	return CreatePatchTargetParamsSet{
		TargetParamsSetMailto: v,
	}
}

// TargetParamsSetPagerdutyAsCreatePatchTargetParamsSet is a convenience function that returns TargetParamsSetPagerduty wrapped in CreatePatchTargetParamsSet
func TargetParamsSetPagerdutyAsCreatePatchTargetParamsSet(v *TargetParamsSetPagerduty) CreatePatchTargetParamsSet {
	return CreatePatchTargetParamsSet{
		TargetParamsSetPagerduty: v,
	}
}

// TargetParamsSetSlackAsCreatePatchTargetParamsSet is a convenience function that returns TargetParamsSetSlack wrapped in CreatePatchTargetParamsSet
func TargetParamsSetSlackAsCreatePatchTargetParamsSet(v *TargetParamsSetSlack) CreatePatchTargetParamsSet {
	return CreatePatchTargetParamsSet{
		TargetParamsSetSlack: v,
	}
}

// TargetParamsSetSqsAsCreatePatchTargetParamsSet is a convenience function that returns TargetParamsSetSqs wrapped in CreatePatchTargetParamsSet
func TargetParamsSetSqsAsCreatePatchTargetParamsSet(v *TargetParamsSetSqs) CreatePatchTargetParamsSet {
	return CreatePatchTargetParamsSet{
		TargetParamsSetSqs: v,
	}
}

// TargetParamsSetWebhookAsCreatePatchTargetParamsSet is a convenience function that returns TargetParamsSetWebhook wrapped in CreatePatchTargetParamsSet
func TargetParamsSetWebhookAsCreatePatchTargetParamsSet(v *TargetParamsSetWebhook) CreatePatchTargetParamsSet {
	return CreatePatchTargetParamsSet{
		TargetParamsSetWebhook: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreatePatchTargetParamsSet) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TargetParamsSetIconworkflow
	err = newStrictDecoder(data).Decode(&dst.TargetParamsSetIconworkflow)
	if err == nil {
		jsonTargetParamsSetIconworkflow, _ := json.Marshal(dst.TargetParamsSetIconworkflow)
		if string(jsonTargetParamsSetIconworkflow) == "{}" { // empty struct
			dst.TargetParamsSetIconworkflow = nil
		} else {
			if err = validator.Validate(dst.TargetParamsSetIconworkflow); err != nil {
				dst.TargetParamsSetIconworkflow = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetParamsSetIconworkflow = nil
	}

	// try to unmarshal data into TargetParamsSetMailto
	err = newStrictDecoder(data).Decode(&dst.TargetParamsSetMailto)
	if err == nil {
		jsonTargetParamsSetMailto, _ := json.Marshal(dst.TargetParamsSetMailto)
		if string(jsonTargetParamsSetMailto) == "{}" { // empty struct
			dst.TargetParamsSetMailto = nil
		} else {
			if err = validator.Validate(dst.TargetParamsSetMailto); err != nil {
				dst.TargetParamsSetMailto = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetParamsSetMailto = nil
	}

	// try to unmarshal data into TargetParamsSetPagerduty
	err = newStrictDecoder(data).Decode(&dst.TargetParamsSetPagerduty)
	if err == nil {
		jsonTargetParamsSetPagerduty, _ := json.Marshal(dst.TargetParamsSetPagerduty)
		if string(jsonTargetParamsSetPagerduty) == "{}" { // empty struct
			dst.TargetParamsSetPagerduty = nil
		} else {
			if err = validator.Validate(dst.TargetParamsSetPagerduty); err != nil {
				dst.TargetParamsSetPagerduty = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetParamsSetPagerduty = nil
	}

	// try to unmarshal data into TargetParamsSetSlack
	err = newStrictDecoder(data).Decode(&dst.TargetParamsSetSlack)
	if err == nil {
		jsonTargetParamsSetSlack, _ := json.Marshal(dst.TargetParamsSetSlack)
		if string(jsonTargetParamsSetSlack) == "{}" { // empty struct
			dst.TargetParamsSetSlack = nil
		} else {
			if err = validator.Validate(dst.TargetParamsSetSlack); err != nil {
				dst.TargetParamsSetSlack = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetParamsSetSlack = nil
	}

	// try to unmarshal data into TargetParamsSetSqs
	err = newStrictDecoder(data).Decode(&dst.TargetParamsSetSqs)
	if err == nil {
		jsonTargetParamsSetSqs, _ := json.Marshal(dst.TargetParamsSetSqs)
		if string(jsonTargetParamsSetSqs) == "{}" { // empty struct
			dst.TargetParamsSetSqs = nil
		} else {
			if err = validator.Validate(dst.TargetParamsSetSqs); err != nil {
				dst.TargetParamsSetSqs = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetParamsSetSqs = nil
	}

	// try to unmarshal data into TargetParamsSetWebhook
	err = newStrictDecoder(data).Decode(&dst.TargetParamsSetWebhook)
	if err == nil {
		jsonTargetParamsSetWebhook, _ := json.Marshal(dst.TargetParamsSetWebhook)
		if string(jsonTargetParamsSetWebhook) == "{}" { // empty struct
			dst.TargetParamsSetWebhook = nil
		} else {
			if err = validator.Validate(dst.TargetParamsSetWebhook); err != nil {
				dst.TargetParamsSetWebhook = nil
			} else {
				match++
			}
		}
	} else {
		dst.TargetParamsSetWebhook = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TargetParamsSetIconworkflow = nil
		dst.TargetParamsSetMailto = nil
		dst.TargetParamsSetPagerduty = nil
		dst.TargetParamsSetSlack = nil
		dst.TargetParamsSetSqs = nil
		dst.TargetParamsSetWebhook = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreatePatchTargetParamsSet)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreatePatchTargetParamsSet)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreatePatchTargetParamsSet) MarshalJSON() ([]byte, error) {
	if src.TargetParamsSetIconworkflow != nil {
		return json.Marshal(&src.TargetParamsSetIconworkflow)
	}

	if src.TargetParamsSetMailto != nil {
		return json.Marshal(&src.TargetParamsSetMailto)
	}

	if src.TargetParamsSetPagerduty != nil {
		return json.Marshal(&src.TargetParamsSetPagerduty)
	}

	if src.TargetParamsSetSlack != nil {
		return json.Marshal(&src.TargetParamsSetSlack)
	}

	if src.TargetParamsSetSqs != nil {
		return json.Marshal(&src.TargetParamsSetSqs)
	}

	if src.TargetParamsSetWebhook != nil {
		return json.Marshal(&src.TargetParamsSetWebhook)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreatePatchTargetParamsSet) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TargetParamsSetIconworkflow != nil {
		return obj.TargetParamsSetIconworkflow
	}

	if obj.TargetParamsSetMailto != nil {
		return obj.TargetParamsSetMailto
	}

	if obj.TargetParamsSetPagerduty != nil {
		return obj.TargetParamsSetPagerduty
	}

	if obj.TargetParamsSetSlack != nil {
		return obj.TargetParamsSetSlack
	}

	if obj.TargetParamsSetSqs != nil {
		return obj.TargetParamsSetSqs
	}

	if obj.TargetParamsSetWebhook != nil {
		return obj.TargetParamsSetWebhook
	}

	// all schemas are nil
	return nil
}

type NullableCreatePatchTargetParamsSet struct {
	value *CreatePatchTargetParamsSet
	isSet bool
}

func (v NullableCreatePatchTargetParamsSet) Get() *CreatePatchTargetParamsSet {
	return v.value
}

func (v *NullableCreatePatchTargetParamsSet) Set(val *CreatePatchTargetParamsSet) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePatchTargetParamsSet) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePatchTargetParamsSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePatchTargetParamsSet(val *CreatePatchTargetParamsSet) *NullableCreatePatchTargetParamsSet {
	return &NullableCreatePatchTargetParamsSet{value: val, isSet: true}
}

func (v NullableCreatePatchTargetParamsSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePatchTargetParamsSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
