/*
InsightOps REST API

### Overview  Our REST API lets you use InsightOps through HTTP requests. Currently, the REST API allows you to perform the majority of the actions available through the UI, and has some additional functionality that is not available through the UI. You may use this API to automate common tasks (for example, via shell scripts), and to generally interact with InsightOps programmatically.  This page precisely describes the REST API and serves as a reference for the API. Each HTTP method and each URL endpoint is documented in a self-contained unit so that users only need to read about the HTTP methods relevant to them.  ### Terminology  * A **log entry** is an individual log event. * A **log** is a collection of log entries, or a single log stream. * A **log set** is a logical-only collection of logs, i.e. logs can be in multiple logsets and deleting a logset only deletes the relation between logs, not the logs themselves. * [Log Entry Query Language](https://docs.rapid7.com/insightops/log-search) (**LEQL**) is the query language used in Insight Ops to search log data.

API version: latest
Contact: support@rapid7.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package insightops

import (
	"encoding/json"
)

// checks if the PatchS3ArchivingSetupS3setup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchS3ArchivingSetupS3setup{}

// PatchS3ArchivingSetupS3setup struct for PatchS3ArchivingSetupS3setup
type PatchS3ArchivingSetupS3setup struct {
	// The name of the S3 Bucket.
	BucketName *string `json:"bucket_name,omitempty"`
	// Boolean indicating whether the S3 setup is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The type of compression used for archiving. This is either \"GZIP\" or \"BZIP2\".
	Compression *string `json:"compression,omitempty"`
}

// NewPatchS3ArchivingSetupS3setup instantiates a new PatchS3ArchivingSetupS3setup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchS3ArchivingSetupS3setup() *PatchS3ArchivingSetupS3setup {
	this := PatchS3ArchivingSetupS3setup{}
	return &this
}

// NewPatchS3ArchivingSetupS3setupWithDefaults instantiates a new PatchS3ArchivingSetupS3setup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchS3ArchivingSetupS3setupWithDefaults() *PatchS3ArchivingSetupS3setup {
	this := PatchS3ArchivingSetupS3setup{}
	return &this
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *PatchS3ArchivingSetupS3setup) GetBucketName() string {
	if o == nil || IsNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchS3ArchivingSetupS3setup) GetBucketNameOk() (*string, bool) {
	if o == nil || IsNil(o.BucketName) {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *PatchS3ArchivingSetupS3setup) HasBucketName() bool {
	if o != nil && !IsNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *PatchS3ArchivingSetupS3setup) SetBucketName(v string) {
	o.BucketName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PatchS3ArchivingSetupS3setup) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchS3ArchivingSetupS3setup) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PatchS3ArchivingSetupS3setup) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PatchS3ArchivingSetupS3setup) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *PatchS3ArchivingSetupS3setup) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchS3ArchivingSetupS3setup) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *PatchS3ArchivingSetupS3setup) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *PatchS3ArchivingSetupS3setup) SetCompression(v string) {
	o.Compression = &v
}

func (o PatchS3ArchivingSetupS3setup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchS3ArchivingSetupS3setup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketName) {
		toSerialize["bucket_name"] = o.BucketName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	return toSerialize, nil
}

type NullablePatchS3ArchivingSetupS3setup struct {
	value *PatchS3ArchivingSetupS3setup
	isSet bool
}

func (v NullablePatchS3ArchivingSetupS3setup) Get() *PatchS3ArchivingSetupS3setup {
	return v.value
}

func (v *NullablePatchS3ArchivingSetupS3setup) Set(val *PatchS3ArchivingSetupS3setup) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchS3ArchivingSetupS3setup) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchS3ArchivingSetupS3setup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchS3ArchivingSetupS3setup(val *PatchS3ArchivingSetupS3setup) *NullablePatchS3ArchivingSetupS3setup {
	return &NullablePatchS3ArchivingSetupS3setup{value: val, isSet: true}
}

func (v NullablePatchS3ArchivingSetupS3setup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchS3ArchivingSetupS3setup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
